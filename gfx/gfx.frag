#version 450

layout (location = 0) uniform float iTime;
layout (location = 1) uniform int iPass;
uniform sampler2D iChannel0;
out vec4 out_color;

const vec2 iResolution = vec2(1280., 720.);

const vec3 c = vec3(1.,0.,-1.);
const float pi = acos(-1.),
    PHI = 1.618,
    bpm = .5*148.,
    spb = 60./bpm;
float scale,
    nbeats,
    stepTime,
    hardBeats;
mat3 RR;
vec3 data[20] = vec3[20](
        vec3(0, PHI, 1), // Dodecahedron
        vec3(0, -PHI, 1),
        vec3(1, 0, PHI),
        vec3(-1, 0, PHI),
        vec3(PHI, 1, 0),
        vec3(-PHI, 1, 0), // Icosahedron, Octahedron
        vec3(1, 1, 1),
        vec3(-1, 1, 1),
        vec3(1, -1, 1),
        vec3(1, 1, -1),
        vec3(0, 1, PHI+1.),
        vec3(0, -1, PHI+1.),
        vec3(PHI+1., 0, 1),
        vec3(-PHI-1., 0, 1),
        vec3(1, PHI+1., 0),
        vec3(-1, PHI+1., 0),
        vec3(sqrt(2.), sqrt(6.), 1.), // Tetrahedron
        vec3(-sqrt(8.), 0., 1.),
        vec3(sqrt(2.), -sqrt(6.), 1.),
        vec3(0., 0., -3.)
    );
const float fsaa = 144.;

// End times
const int ntimes = 8;
const float times[ntimes] = float[ntimes](
    15.*spb, // Cube 210
    30.*spb, // Bullencoolen
    48.*spb, // Nippelbrokkoli
    60.*spb, // Metaballs
    75.*spb, // Ribbons
    90.*spb, // Polytopes
    110.*spb, // Mod shit
    120.*spb // Empty tunnelmod
    // 125.*spb // Happy new year
);
// const float times[8] = float[8](0.,0.,0.,0.,0.,1.e3,0.,0.);

// Created by David Hoskins and licensed under MIT.
// See https://www.shadertoy.com/view/4djSRW.
// vec3->float hash function
// float hash13(vec3 p3)
// {
// 	p3  = fract(p3 * .1031);
//     p3 += dot(p3, p3.zyx + 31.32);
//     return fract((p3.x + p3.y) * p3.z);
// }

// Created by David Hoskins and licensed under MIT.
// See https://www.shadertoy.com/view/4djSRW.
// vec2->float hash function
float hash12(vec2 p)
{
	vec3 p3  = fract(vec3(p.xyx) * .1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return fract((p3.x + p3.y) * p3.z);
}

// Creative Commons Attribution-ShareAlike 4.0 International Public License
// Created by David Hoskins.
// See https://www.shadertoy.com/view/4djSRW
// vec3 hash33(vec3 p3)
// {
// 	p3 = fract(p3 * vec3(.1031, .1030, .0973));
//     p3 += dot(p3, p3.yxz+33.33);
//     return fract((p3.xxy + p3.yxx)*p3.zyx);
// }

// Created by David Hoskins and licensed under MIT.
// See https://www.shadertoy.com/view/4djSRW.
// vec2->vec2 hash function
vec2 hash22(vec2 p)
{
	vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yzx+33.33);
    return fract((p3.xx+p3.yz)*p3.zy);
}

// Created by David Hoskins and licensed under MIT.
// See https://www.shadertoy.com/view/4djSRW.
// float->float hash function
float hash11(float p)
{
    p = fract(p * .1031);
    p *= p + 33.33;
    p *= p + p;
    return fract(p);
}

// Created by David Hoskins and licensed under MIT.
// See https://www.shadertoy.com/view/4djSRW.
// float->vec3 hash function
vec3 hash31(float p)
{
   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));
   p3 += dot(p3, p3.yzx+33.33);
   return fract((p3.xxy+p3.yzz)*p3.zyx); 
}

// Low-Frequency noise (value-type)
float lfnoise(vec2 t)
{
    vec2 i = floor(t);
    t = fract(t);
    t = smoothstep(c.yy, c.xx, t);
    vec2 v1 = vec2(hash12(i), hash12(i+c.xy)), 
        v2 = vec2(hash12(i+c.yx), hash12(i+c.xx));
    v1 = c.zz+2.*mix(v1, v2, t.y);
    return mix(v1.x, v1.y, t.x);
}

// Convert RGB to HSV colors
vec3 rgb2hsv(vec3 cc)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(cc.bg, K.wz), vec4(cc.gb, K.xy), step(cc.b, cc.g));
    vec4 q = mix(vec4(p.xyw, cc.r), vec4(cc.r, p.yzx), step(p.x, cc.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

// Convert HSV to RGB colors
vec3 hsv2rgb(vec3 cc)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(cc.xxx + K.xyz) * 6.0 - K.www);
    return cc.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), cc.y);
}

// Rotation in R3
mat3 rot3(in vec3 p)
{
    return mat3(c.xyyy, cos(p.x), sin(p.x), 0., -sin(p.x), cos(p.x))
        *mat3(cos(p.y), 0., -sin(p.y), c.yxy, sin(p.y), 0., cos(p.y))
        *mat3(cos(p.z), -sin(p.z), 0., sin(p.z), cos(p.z), c.yyyx);
}

// Distance functions

// 2D box distance
float dbox2(vec2 x, vec2 b)
{
    vec2 da = abs(x)-b;
    return length(max(da,c.yy)) + min(max(da.x,da.y),0.0);
}

// 3D box distance
float dbox3(vec3 x, vec3 b)
{
	vec3 da = abs(x) - b;
	return length(max(da,0.0))
			+ min(max(da.x,max(da.y,da.z)),0.0);
}

// Distance to circle segment
// float dcirclesegment2(vec2 x, float r, float p0, float p1)
// {
//     float p = atan(x.y, x.x),
//         t = 2.*pi;
    
//     vec2 philo = vec2(p0, p1);
//     philo = sign(philo)*floor(abs(philo)/t)*t;
//     philo = vec2(min(philo.x, philo.y), max(philo.x,philo.y));
//     philo.y = mix(philo.y,philo.x,.5+.5*sign(p0-p1));
    
//     p0 -= philo.y;
//     p1 -= philo.y;
    
//     philo = vec2(max(p0, p1), min(p0, p1));
    
//     if((p < philo.x && p > philo.y) 
//        || (p+t < philo.x && p+t > philo.y) 
//        || (p-t < philo.x && p-t > philo.y)
//       )
//     	return abs(length(x)-r);
//     return min(
//         length(x-r*vec2(cos(p0), sin(p0))),
//         length(x-r*vec2(cos(p1), sin(p1)))
//         );
// }

// Regular polygon distance
float dregularpolygon(in vec2 x, in float R, in float N)
{
    float p = atan(x.y,x.x),
        k = pi/N,
    	dp = mod(p+pi, 2.*k);
    
    vec2 p1 = R*c.xy,
        p2 = R*vec2(cos(2.*k),sin(2.*k)),
        dpp = p2-p1,
        n = normalize(p2-p1).yx*c.xz, 
        xp = length(x)*vec2(cos(dp), sin(dp));
    float t = dot(xp-p1,dpp)/dot(dpp,dpp);
    float r = dot(xp-p1,n);
    if(t < 0.)
        return sign(r)*length(xp-p1);
    else if(t > 1.)
        return sign(r)*length(xp-p2);
    else
	    return r;
}

// Regular star distance
float dstar(in vec2 x, in float r1, in float r2, in float N)
{
    N *= 2.;
    float p = atan(x.y,x.x),
        k = pi/N,
    	dp = mod(p+pi, 2.*k),
    	parity = mod(round((p+pi-dp)*.5/k), 2.),
        dk = k,
        dkp = mix(dk,-dk,parity);
    
    vec2 p1 = r1*vec2(cos(k-dkp),sin(k-dkp)),
        p2 = r2*vec2(cos(k+dkp),sin(k+dkp)),
        dpp = p2-p1,
        n = normalize(p2-p1).yx*c.xz, 
        xp = length(x)*vec2(cos(dp), sin(dp));
    float t = dot(xp-p1,dpp)/dot(dpp,dpp);
    float r = mix(1.,-1.,parity)*dot(xp-p1,n);
    if(t < 0.)
        return sign(r)*length(xp-p1);
    else if(t > 1.)
        return sign(r)*length(xp-p2);
    else
	    return r;
}

// Extrude sdf along axis
float zextrude(float z, float d2d, float h)
{
    vec2 w = vec2(d2d, abs(z)-0.5*h);
    return min(max(w.x,w.y),0.0) + length(max(w,0.0));
}

// Inspired here, modified for sizecoding and removed loads of
// unneccessary code: https://www.shadertoy.com/view/WdlGRf
// The paper they reference is very useful for understanding the regular polyhedron distances
// fHedron(0,6): Dodecahedron
// fHedron(6,10): Octahedron
// fHedron(6,16): Icosahedron
float fHedron(vec3 p, int offset, int len, float r, bool symmetric)
{
    float d = 0.,
        da;
    for(int i=offset; i<len; ++i)
    {
        da = dot(p, normalize(data[i]));
        d = max(d, symmetric?abs(da):da);
    }
    return d - r;
}

// From BackwardsCap: https://www.shadertoy.com/view/tsV3Rd
// thanks to BigWIngs/The Art Of Code's videos on hex tiling and truchet patterns
vec4 hexCoords(vec2 p)
{
    vec2 s = vec2(1,1.73);
    vec2 hs = s*.5,
         c1 = mod(p,s)-hs,
         c2 = mod(p-hs,s)-hs;
    vec2 hc= dot(c1, c1)<dot(c2,c2)?c1:c2;
    return vec4(hc, p-hc);
}

// Determine zeros of k.x*x^2+k.y*x+k.z
vec2 quadratic_zeros(vec3 k)
{
    if(k.x == 0.) return -k.z/k.y*c.xx;
    float d = k.y*k.y-4.*k.x*k.z;
    if(d<0.) return vec2(1.e4);
    return (c.xz*sqrt(d)-k.y)/(2.*k.x);
}

// Determine zeros of k.x*x^3+k.y*x^2+k.z*x+k.w
vec3 cubic_zeros(vec4 k)
{
    if(k.x == 0.) return quadratic_zeros(k.yzw).xyy;
    
    // Depress
    vec3 ai = k.yzw/k.x;
    
    //discriminant and helpers
    float tau = ai.x/3., 
        p = ai.y-tau*ai.x, 
        q = -tau*(tau*tau+p)+ai.z, 
        dis = q*q/4.+p*p*p/27.;
        
    //triple real root
    if(dis > 0.) {
        vec2 ki = -.5*q*c.xx+sqrt(dis)*c.xz, 
            ui = sign(ki)*pow(abs(ki), c.xx/3.);
        return vec3(ui.x+ui.y-tau);
    }
    
    //three distinct real roots
    float fac = sqrt(-4./3.*p), 
        arg = acos(-.5*q*sqrt(-27./p/p/p))/3.;
    return c.zxz*fac*cos(arg*c.xxx+c*pi/3.)-tau;
}

// 2D Point on a spline
vec2 xspline2(vec2 x, float t, vec2 p0, vec2 p1, vec2 p2)
{
    return mix(mix(p0,p1,t),mix(p1,p2,t),t);
}

// 2D Distance to a point on a spline
float dspline2(vec2 x, float t, vec2 p0, vec2 p1, vec2 p2)
{
    return length(x - xspline2(x, t, p0, p1, p2));
}

// 2D Normal in a point on a spline
vec2 nspline2(vec2 x, float t, vec2 p0, vec2 p1, vec2 p2)
{
    return normalize(mix(p1-p0, p2-p1, t));
}

// Returns vec2(dmin, tmin).
// 2D spline parameter of the point with minimum distance on the spline and sdf
vec2 dtspline2(vec2 x, vec2 p0, vec2 p1, vec2 p2)
{
    vec2 E0 = x-p0, F0 = p2-2.*p1+p0, G0 = p1-p0;
    vec3 E = clamp(cubic_zeros(vec4(dot(F0,F0), 3.*dot(G0,F0), 2.*dot(G0,G0)-dot(E0,F0), -dot(E0,G0))),0.,1.),
        F = vec3(dspline2(x,E.x,p0,p1,p2),dspline2(x,E.y,p0,p1,p2),dspline2(x,E.z,p0,p1,p2));
    return F.x < F.y && F.x < F.z
        ? vec2(F.x, E.x)
        : F.y < F.x && F.y < F.z
            ? vec2(F.y, E.y)
            : vec2(F.z, E.z);
}

// 2D line nearest parameter
float tline2(vec2 x, vec2 p1, vec2 p2)
{
    vec2 da = p2-p1;
    return clamp(dot(x-p1, da)/dot(da,da),0.,1.);
}

// 2D line distance
float dline2(vec2 x, vec2 p1, vec2 p2)
{
    return length(x-mix(p1, p2, tline2(x,p1,p2)));
}

vec2 dtline2(vec2 x, vec2 p1, vec2 p2)
{
    vec2 da = p2-p1,
        result;
    result.y = clamp(dot(x-p1, da)/dot(da,da),0.,1.);
    result.x = length(x-mix(p1, p2, result.y));
    return result;
}

vec2 dtline2_unclamped(vec2 x, vec2 p1, vec2 p2)
{
    vec2 da = p2-p1,
        result;
    result.y = dot(x-p1, da)/dot(da,da);
    result.x = length(x-mix(p1, p2, result.y));
    return result;
}

float dbox210(vec3 x, float size)
{
    x /= size;
    
    float d = 1.;
    
    // Big red box
    d = min(d, dbox3(x, .2*c.xxx));
    
    // Holes
    
    // 2 upper bar
    d = max(d, -dbox3(x-.1*c.xyy, vec3(.02,.3,.12)));
    
    // 2 right bar
    d = max(d, -dbox3(x-.05*c.xyy-.1*c.yyx, vec3(.07,.3,.02)));
    
    // 2 mid bar
    d = max(d, -dbox3(x, vec3(.02,.3,.1)));
    
    // 2 left bar
    d = max(d, -dbox3(x+.05*c.xyy+.1*c.yyx, vec3(.07,.3,.02)));
    
    // 2 dot
    d = max(d, -dbox3(x+.1*c.xyy-.1*c.yyx, vec3(.02,.3,.02)));
    
    // 1 bar
    d = max(d, -dbox3(x+.04*c.yyx, vec3(.3,.02,.08)));
    
    // 1 dot
    d = max(d, -dbox3(x-.1*c.yyx, vec3(.3,.02,.02)));
    
    // 0 big stripes
    vec3 y = vec3(x.x, abs(x.y), x.z);
    d = max(d, -dbox3(y-.05*c.yxy, vec3(.1,.03,.3)));

	// 0 small stripes
    d = max(d, -dbox3(y-.1*c.yxy-.06*c.xyy, vec3(.08,.021,.3)));

    // 0 upper/lower stripes
    vec3 z = vec3(abs(x.x), x.yz);
	d = max(d, -dbox3(z-.119*c.xyy, vec3(.021,.08,.3)));
    
    return d * size;
}

// Originally from https://www.shadertoy.com/view/lllXz4
// Modified by fizzer to put out the vector q.
// Modified by NR4 to reduce size.
// Inverse spherical fibonacci mapping tech by las/mercury
vec2 inverseSF( vec3 p, float n, out vec3 outq ) 
{
    float m = 1. - 1./n,
        phi = min(atan(p.y, p.x), pi), cosTheta = p.z,
        k  = max(2., floor( log(n * pi * sqrt(5.) * (1.0 - cosTheta*cosTheta))/ log(PHI+1.))),
        Fk = pow(PHI, k)/sqrt(5.0),
        d,j;
    vec2  F  = vec2( round(Fk), round(Fk * PHI) ),
        ka = 2.*F/n,
        kb = 2.*pi*( fract((F+1.0)*PHI) - (PHI-1.) ),
        c;    
    mat2 iB = mat2( ka.y, -ka.x, kb.y, -kb.x ) / (ka.y*kb.x - ka.x*kb.y);
    
    c = floor( iB * vec2(phi, cosTheta - m));
    d = 8.;
    j = 0.;
    for( int s=0; s<4; s++ ) 
    {
        vec2 uv = vec2( float(s-2*(s/2)), float(s/2) );
        
        float i = round(dot(F, uv + c)),
            phi = 2.0*pi*fract(i*PHI),
            cosTheta = m - 2.0*i/n,
            sinTheta = sqrt(1.0 - cosTheta*cosTheta);
        vec3 q = vec3( cos(phi)*sinTheta, sin(phi)*sinTheta, cosTheta );
        float squaredDistance = dot(q-p, q-p);
        
        if (squaredDistance < d) 
        {
            outq = q;
            d = squaredDistance;
            j = i;
        }
    }
    return vec2( j, sqrt(d) );
}

// // 3D Point on a spline
// vec3 xspline3(vec3 x, float t, vec3 p0, vec3 p1, vec3 p2)
// {
//     return mix(mix(p0,p1,t),mix(p1,p2,t),t);
// }

// // 3D Distance to a point on a spline
// float dspline3(vec3 x, float t, vec3 p0, vec3 p1, vec3 p2)
// {
//     return length(x - xspline3(x, t, p0, p1, p2));
// }

// // 3D Normal in a point on a spline
// vec3 nspline3(vec3 x, float t, vec3 p0, vec3 p1, vec3 p2)
// {
//     return normalize(mix(p1-p0, p2-p1, t));
// }

// // Returns vec2(dmin, tmin).
// // 3D spline parameter of the point with minimum distance on the spline and sdf
// vec2 dtspline3(vec3 x, vec3 p0, vec3 p1, vec3 p2)
// {
//     vec3 E = x-p0, F = p2-2.*p1+p0, G = p1-p0;
//     E = clamp(cubic_zeros(vec4(dot(F,F), 3.*dot(G,F), 2.*dot(G,G)-dot(E,F), -dot(E,G))),0.,1.);
//     F = vec3(dspline3(x,E.x,p0,p1,p2),dspline3(x,E.y,p0,p1,p2),dspline3(x,E.z,p0,p1,p2));
//     return F.x < F.y && F.x < F.z
//         ? vec2(F.x, E.x)
//         : F.y < F.x && F.y < F.z
//             ? vec2(F.y, E.y)
//             : vec2(F.z, E.z);
// }

// Compute an orthonormal system from a single vector in R^3
mat3 ortho(vec3 d)
{
    vec3 a = normalize(
        d.x != 0. 
            ? vec3(-d.y/d.x,1.,0.)
            : d.y != 0.
                ? vec3(1.,-d.x/d.y,0.)
                : vec3(1.,0.,-d.x/d.z)
    );
    return mat3(d, a, cross(d,a));
}

float dbox3_wireframe(vec3 x, vec3 b, float db)
{
    float d = dbox3(x,b); 
    d = max(d, -dbox3(x, b+c.zzx*db));
    d = max(d, -dbox3(x, b+c.xzz*db));
    return max(d, -dbox3(x, b+c.zxz*db));
}

// 3D line nearest parameter
float tline3(vec3 x, vec3 p1, vec3 p2)
{
    vec3 da = p2-p1;
    return clamp(dot(x-p1, da)/dot(da,da),0.,1.);
}

// 3D line distance
float dline3(vec3 x, vec3 p1, vec3 p2)
{
    return length(x-mix(p1, p2, tline3(x,p1,p2)));
}

const int npts = 664;
const float path[npts] = float[npts](0.474,-0.145,0.474,-0.062,0.474,-0.062,0.500,-0.062,0.500,-0.062,0.500,-0.145,0.500,-0.145,0.474,-0.145,0.385,-0.145,0.385,0.104,0.385,0.104,0.449,0.104,0.449,0.104,0.449,0.063,0.449,0.063,0.462,0.063,0.462,0.063,0.462,-0.145,0.462,-0.145,0.436,-0.145,0.436,-0.145,0.436,0.060,0.436,0.060,0.423,0.060,0.423,0.060,0.423,0.019,0.423,0.019,0.411,0.019,0.411,0.019,0.411,-0.145,0.411,-0.145,0.385,-0.145,0.321,0.060,0.321,-0.020,0.321,-0.020,0.346,-0.020,0.346,-0.020,0.346,0.060,0.346,0.060,0.321,0.060,0.308,-0.145,0.308,-0.104,0.308,-0.104,0.295,-0.104,0.295,-0.104,0.295,0.063,0.295,0.063,0.308,0.063,0.308,0.063,0.308,0.104,0.308,0.104,0.359,0.104,0.359,0.104,0.359,0.063,0.359,0.063,0.372,0.063,0.372,0.063,0.372,-0.063,0.372,-0.063,0.321,-0.063,0.321,-0.063,0.321,-0.102,0.321,-0.102,0.359,-0.102,0.359,-0.102,0.359,-0.145,0.359,-0.145,0.308,-0.145,0.256,-0.145,0.256,0.102,0.256,0.102,0.244,0.102,0.244,0.102,0.244,0.145,0.244,0.145,0.282,0.145,0.282,0.145,0.282,-0.145,0.282,-0.145,0.256,-0.145,0.180,-0.102,0.205,-0.102,0.205,-0.102,0.205,0.060,0.205,0.060,0.180,0.060,0.180,0.060,0.180,-0.102,0.167,-0.145,0.167,-0.104,0.167,-0.104,0.154,-0.104,0.154,-0.104,0.154,0.063,0.154,0.063,0.167,0.063,0.167,0.063,0.167,0.104,0.167,0.104,0.218,0.104,0.218,0.104,0.218,0.063,0.218,0.063,0.231,0.063,0.231,0.063,0.231,-0.104,0.231,-0.104,0.218,-0.104,0.218,-0.104,0.218,-0.145,0.218,-0.145,0.167,-0.145,0.090,-0.102,0.115,-0.102,0.115,-0.102,0.115,0.060,0.115,0.060,0.090,0.060,0.090,0.060,0.090,-0.102,0.077,-0.145,0.077,-0.104,0.077,-0.104,0.064,-0.104,0.064,-0.104,0.064,0.063,0.064,0.063,0.077,0.063,0.077,0.063,0.077,0.104,0.077,0.104,0.128,0.104,0.128,0.104,0.128,0.063,0.128,0.063,0.141,0.063,0.141,0.063,0.141,-0.104,0.141,-0.104,0.128,-0.104,0.128,-0.104,0.128,-0.145,0.128,-0.145,0.077,-0.145,-0.013,-0.145,-0.013,-0.104,-0.013,-0.104,-0.026,-0.104,-0.026,-0.104,-0.026,0.063,-0.026,0.063,-0.013,0.063,-0.013,0.063,-0.013,0.104,-0.013,0.104,0.039,0.104,0.039,0.104,0.039,0.063,0.039,0.063,0.051,0.063,0.051,0.063,0.051,0.019,0.051,0.019,0.025,0.019,0.025,0.019,0.025,0.060,0.025,0.060,0.000,0.060,0.000,0.060,0.000,-0.102,0.000,-0.102,0.025,-0.102,0.025,-0.102,0.025,-0.061,0.025,-0.061,0.051,-0.061,0.051,-0.061,0.051,-0.104,0.051,-0.104,0.039,-0.104,0.039,-0.104,0.039,-0.145,0.039,-0.145,-0.013,-0.145,-0.115,-0.145,-0.115,0.104,-0.115,0.104,-0.051,0.104,-0.051,0.104,-0.051,0.063,-0.051,0.063,-0.038,0.063,-0.038,0.063,-0.038,-0.145,-0.038,-0.145,-0.064,-0.145,-0.064,-0.145,-0.064,0.060,-0.064,0.060,-0.077,0.060,-0.077,0.060,-0.077,0.019,-0.077,0.019,-0.089,0.019,-0.089,0.019,-0.089,-0.145,-0.089,-0.145,-0.115,-0.145,-0.179,0.060,-0.179,-0.020,-0.179,-0.020,-0.154,-0.020,-0.154,-0.020,-0.154,0.060,-0.154,0.060,-0.179,0.060,-0.192,-0.145,-0.192,-0.104,-0.192,-0.104,-0.205,-0.104,-0.205,-0.104,-0.205,0.063,-0.205,0.063,-0.192,0.063,-0.192,0.063,-0.192,0.104,-0.192,0.104,-0.141,0.104,-0.141,0.104,-0.141,0.063,-0.141,0.063,-0.128,0.063,-0.128,0.063,-0.128,-0.063,-0.128,-0.063,-0.179,-0.063,-0.179,-0.063,-0.179,-0.102,-0.179,-0.102,-0.141,-0.102,-0.141,-0.102,-0.141,-0.145,-0.141,-0.145,-0.192,-0.145,-0.244,-0.145,-0.244,0.102,-0.244,0.102,-0.256,0.102,-0.256,0.102,-0.256,0.145,-0.256,0.145,-0.218,0.145,-0.218,0.145,-0.218,-0.145,-0.218,-0.145,-0.244,-0.145,-0.295,-0.145,-0.295,0.102,-0.295,0.102,-0.308,0.102,-0.308,0.102,-0.308,0.145,-0.308,0.145,-0.269,0.145,-0.269,0.145,-0.269,-0.145,-0.269,-0.145,-0.295,-0.145,-0.385,-0.145,-0.385,-0.104,-0.385,-0.104,-0.397,-0.104,-0.397,-0.104,-0.397,0.104,-0.397,0.104,-0.371,0.104,-0.371,0.104,-0.371,-0.102,-0.371,-0.102,-0.359,-0.102,-0.359,-0.102,-0.359,-0.061,-0.359,-0.061,-0.347,-0.061,-0.347,-0.061,-0.347,0.104,-0.347,0.104,-0.321,0.104,-0.321,0.104,-0.321,-0.145,-0.321,-0.145,-0.385,-0.145,-0.474,0.102,-0.474,0.022,-0.474,0.022,-0.436,0.022,-0.436,0.022,-0.436,0.102,-0.436,0.102,-0.474,0.102,-0.423,-0.104,-0.423,-0.145,-0.423,-0.145,-0.500,-0.145,-0.500,-0.145,-0.500,0.145,-0.500,0.145,-0.423,0.145,-0.423,0.145,-0.423,0.104,-0.423,0.104,-0.410,0.104,-0.410,0.104,-0.410,0.019,-0.410,0.019,-0.436,0.019,-0.436,0.019,-0.436,-0.019,-0.436,-0.019,-0.410,-0.019,-0.410,-0.019,-0.410,-0.104,-0.410,-0.104,-0.423,-0.104,-0.474,-0.102,-0.436,-0.102,-0.436,-0.102,-0.436,-0.022,-0.436,-0.022,-0.474,-0.022,-0.474,-0.022,-0.474,-0.102);

const int npts1 = 736;
const float path1[npts1] = float[npts1](0.473,-0.087,0.473,-0.029,0.473,-0.029,0.500,-0.029,0.500,-0.029,0.500,-0.087,0.500,-0.087,0.473,-0.087,0.406,-0.001,0.406,-0.057,0.406,-0.057,0.432,-0.057,0.432,-0.057,0.432,-0.001,0.432,-0.001,0.406,-0.001,0.378,-0.058,0.378,0.001,0.378,0.001,0.392,0.001,0.392,0.001,0.392,0.030,0.392,0.030,0.432,0.030,0.432,0.030,0.432,0.057,0.432,0.057,0.392,0.057,0.392,0.057,0.392,0.087,0.392,0.087,0.446,0.087,0.446,0.087,0.446,0.058,0.446,0.058,0.459,0.058,0.459,0.058,0.459,-0.058,0.459,-0.058,0.446,-0.058,0.446,-0.058,0.446,-0.087,0.446,-0.087,0.392,-0.087,0.392,-0.087,0.392,-0.058,0.392,-0.058,0.378,-0.058,0.284,-0.087,0.284,0.116,0.284,0.116,0.311,0.116,0.311,0.116,0.311,0.001,0.311,0.001,0.324,0.001,0.324,0.001,0.324,0.030,0.324,0.030,0.337,0.030,0.337,0.030,0.337,0.087,0.337,0.087,0.365,0.087,0.365,0.087,0.365,0.028,0.365,0.028,0.351,0.028,0.351,0.028,0.351,-0.001,0.351,-0.001,0.338,-0.001,0.338,-0.001,0.338,-0.028,0.338,-0.028,0.351,-0.028,0.351,-0.028,0.351,-0.057,0.351,-0.057,0.365,-0.057,0.365,-0.057,0.365,-0.087,0.365,-0.087,0.337,-0.087,0.337,-0.087,0.337,-0.058,0.337,-0.058,0.324,-0.058,0.324,-0.058,0.324,-0.029,0.324,-0.029,0.311,-0.029,0.311,-0.029,0.311,-0.087,0.311,-0.087,0.284,-0.087,0.243,0.115,0.243,0.145,0.243,0.145,0.270,0.145,0.270,0.145,0.270,0.115,0.270,0.115,0.243,0.115,0.243,-0.087,0.243,0.057,0.243,0.057,0.230,0.057,0.230,0.057,0.230,0.087,0.230,0.087,0.270,0.087,0.270,0.087,0.270,-0.087,0.270,-0.087,0.243,-0.087,0.189,-0.087,0.189,0.086,0.189,0.086,0.176,0.086,0.176,0.086,0.176,0.116,0.176,0.116,0.216,0.116,0.216,0.116,0.216,-0.087,0.216,-0.087,0.189,-0.087,0.109,-0.057,0.135,-0.057,0.135,-0.057,0.135,0.057,0.135,0.057,0.109,0.057,0.109,0.057,0.109,-0.057,0.094,-0.087,0.094,-0.058,0.094,-0.058,0.081,-0.058,0.081,-0.058,0.081,0.058,0.081,0.058,0.094,0.058,0.094,0.058,0.094,0.087,0.094,0.087,0.149,0.087,0.149,0.087,0.149,0.058,0.149,0.058,0.162,0.058,0.162,0.058,0.162,-0.058,0.162,-0.058,0.149,-0.058,0.149,-0.058,0.149,-0.087,0.149,-0.087,0.094,-0.087,-0.014,-0.087,-0.014,0.116,-0.014,0.116,0.014,0.116,0.014,0.116,0.014,0.087,0.014,0.087,0.054,0.087,0.054,0.087,0.054,0.058,0.054,0.058,0.068,0.058,0.068,0.058,0.068,-0.087,0.068,-0.087,0.040,-0.087,0.040,-0.087,0.040,0.057,0.040,0.057,0.027,0.057,0.027,0.057,0.027,0.028,0.027,0.028,0.014,0.028,0.014,0.028,0.014,-0.087,0.014,-0.087,-0.014,-0.087,-0.081,-0.057,-0.054,-0.057,-0.054,-0.057,-0.054,0.057,-0.054,0.057,-0.081,0.057,-0.081,0.057,-0.081,-0.057,-0.095,-0.087,-0.095,-0.058,-0.095,-0.058,-0.108,-0.058,-0.108,-0.058,-0.108,0.058,-0.108,0.058,-0.095,0.058,-0.095,0.058,-0.095,0.087,-0.095,0.087,-0.040,0.087,-0.040,0.087,-0.040,0.058,-0.040,0.058,-0.027,0.058,-0.027,0.058,-0.027,-0.058,-0.027,-0.058,-0.040,-0.058,-0.040,-0.058,-0.040,-0.087,-0.040,-0.087,-0.095,-0.087,-0.189,-0.087,-0.189,-0.058,-0.189,-0.058,-0.203,-0.058,-0.203,-0.058,-0.203,0.058,-0.203,0.058,-0.189,0.058,-0.189,0.058,-0.189,0.087,-0.189,0.087,-0.135,0.087,-0.135,0.087,-0.135,0.058,-0.135,0.058,-0.122,0.058,-0.122,0.058,-0.122,0.028,-0.122,0.028,-0.149,0.028,-0.149,0.028,-0.149,0.057,-0.149,0.057,-0.175,0.057,-0.175,0.057,-0.175,-0.057,-0.175,-0.057,-0.149,-0.057,-0.149,-0.057,-0.149,-0.028,-0.149,-0.028,-0.122,-0.028,-0.122,-0.028,-0.122,-0.058,-0.122,-0.058,-0.135,-0.058,-0.135,-0.058,-0.135,-0.087,-0.135,-0.087,-0.189,-0.087,-0.284,-0.145,-0.284,-0.115,-0.284,-0.115,-0.244,-0.115,-0.244,-0.115,-0.244,-0.087,-0.244,-0.087,-0.284,-0.087,-0.284,-0.087,-0.284,-0.059,-0.284,-0.059,-0.297,-0.059,-0.297,-0.059,-0.297,0.087,-0.297,0.087,-0.270,0.087,-0.270,0.087,-0.270,-0.057,-0.270,-0.057,-0.244,-0.057,-0.244,-0.057,-0.244,0.087,-0.244,0.087,-0.216,0.087,-0.216,0.087,-0.216,-0.116,-0.216,-0.116,-0.230,-0.116,-0.230,-0.116,-0.230,-0.145,-0.230,-0.145,-0.284,-0.145,-0.392,-0.058,-0.392,-0.028,-0.392,-0.028,-0.364,-0.028,-0.364,-0.028,-0.364,-0.057,-0.364,-0.057,-0.338,-0.057,-0.338,-0.057,-0.338,-0.001,-0.338,-0.001,-0.379,-0.001,-0.379,-0.001,-0.379,0.028,-0.379,0.028,-0.392,0.028,-0.392,0.028,-0.392,0.058,-0.392,0.058,-0.379,0.058,-0.379,0.058,-0.379,0.087,-0.379,0.087,-0.324,0.087,-0.324,0.087,-0.324,0.057,-0.324,0.057,-0.364,0.057,-0.364,0.057,-0.364,0.030,-0.364,0.030,-0.324,0.030,-0.324,0.030,-0.324,0.001,-0.324,0.001,-0.311,0.001,-0.311,0.001,-0.311,-0.058,-0.311,-0.058,-0.324,-0.058,-0.324,-0.058,-0.324,-0.087,-0.324,-0.087,-0.379,-0.087,-0.379,-0.087,-0.379,-0.058,-0.379,-0.058,-0.392,-0.058,-0.472,0.086,-0.472,0.001,-0.472,0.001,-0.433,0.001,-0.433,0.001,-0.433,0.086,-0.433,0.086,-0.472,0.086,-0.500,-0.087,-0.500,0.116,-0.500,0.116,-0.419,0.116,-0.419,0.116,-0.419,0.087,-0.419,0.087,-0.405,0.087,-0.405,0.087,-0.405,-0.001,-0.405,-0.001,-0.419,-0.001,-0.419,-0.001,-0.419,-0.029,-0.419,-0.029,-0.472,-0.029,-0.472,-0.029,-0.472,-0.087,-0.472,-0.087,-0.500,-0.087);

// const int npts2 = 1720;
// const float path2[npts2] = float[npts2](0.471,-0.079,0.471,-0.026,0.471,-0.026,0.500,-0.026,0.500,-0.026,0.500,-0.066,0.500,-0.066,0.490,-0.066,0.490,-0.066,0.490,-0.079,0.490,-0.079,0.471,-0.079,0.471,-0.119,0.471,-0.092,0.471,-0.092,0.490,-0.092,0.490,-0.092,0.490,-0.119,0.490,-0.119,0.471,-0.119,0.403,-0.119,0.403,-0.039,0.403,-0.039,0.461,-0.039,0.461,-0.039,0.461,-0.053,0.461,-0.053,0.432,-0.053,0.432,-0.053,0.432,-0.066,0.432,-0.066,0.423,-0.066,0.423,-0.066,0.423,-0.119,0.423,-0.119,0.403,-0.119,0.355,-0.079,0.355,-0.105,0.355,-0.105,0.373,-0.105,0.373,-0.105,0.373,-0.079,0.373,-0.079,0.355,-0.079,0.335,-0.105,0.335,-0.079,0.335,-0.079,0.345,-0.079,0.345,-0.079,0.345,-0.065,0.345,-0.065,0.373,-0.065,0.373,-0.065,0.373,-0.053,0.373,-0.053,0.345,-0.053,0.345,-0.053,0.345,-0.039,0.345,-0.039,0.384,-0.039,0.384,-0.039,0.384,-0.052,0.384,-0.052,0.393,-0.052,0.393,-0.052,0.393,-0.105,0.393,-0.105,0.384,-0.105,0.384,-0.105,0.384,-0.119,0.384,-0.119,0.345,-0.119,0.345,-0.119,0.345,-0.105,0.345,-0.105,0.335,-0.105,0.287,-0.053,0.287,-0.079,0.287,-0.079,0.306,-0.079,0.306,-0.079,0.306,-0.053,0.306,-0.053,0.287,-0.053,0.277,-0.119,0.277,-0.105,0.277,-0.105,0.267,-0.105,0.267,-0.105,0.267,-0.052,0.267,-0.052,0.277,-0.052,0.277,-0.052,0.277,-0.039,0.277,-0.039,0.316,-0.039,0.316,-0.039,0.316,-0.052,0.316,-0.052,0.325,-0.052,0.325,-0.052,0.325,-0.092,0.325,-0.092,0.287,-0.092,0.287,-0.092,0.287,-0.105,0.287,-0.105,0.316,-0.105,0.316,-0.105,0.316,-0.119,0.316,-0.119,0.277,-0.119,0.209,-0.145,0.209,-0.131,0.209,-0.131,0.238,-0.131,0.238,-0.131,0.238,-0.119,0.238,-0.119,0.209,-0.119,0.209,-0.119,0.209,-0.106,0.209,-0.106,0.199,-0.106,0.199,-0.106,0.199,-0.039,0.199,-0.039,0.219,-0.039,0.219,-0.039,0.219,-0.105,0.219,-0.105,0.238,-0.105,0.238,-0.105,0.238,-0.039,0.238,-0.039,0.257,-0.039,0.257,-0.039,0.257,-0.132,0.257,-0.132,0.248,-0.132,0.248,-0.132,0.248,-0.145,0.248,-0.145,0.209,-0.145,0.063,-0.119,0.063,-0.092,0.063,-0.092,0.053,-0.092,0.053,-0.092,0.053,-0.039,0.053,-0.039,0.073,-0.039,0.073,-0.039,0.073,-0.065,0.073,-0.065,0.082,-0.065,0.082,-0.065,0.082,-0.052,0.082,-0.052,0.092,-0.052,0.092,-0.052,0.092,-0.065,0.092,-0.065,0.102,-0.065,0.102,-0.065,0.102,-0.039,0.102,-0.039,0.121,-0.039,0.121,-0.039,0.121,-0.092,0.121,-0.092,0.112,-0.092,0.112,-0.092,0.112,-0.119,0.112,-0.119,0.092,-0.119,0.092,-0.119,0.092,-0.105,0.092,-0.105,0.083,-0.105,0.083,-0.105,0.083,-0.119,0.083,-0.119,0.063,-0.119,0.005,-0.053,0.005,-0.079,0.005,-0.079,0.024,-0.079,0.024,-0.079,0.024,-0.053,0.024,-0.053,0.005,-0.053,-0.005,-0.119,-0.005,-0.105,-0.005,-0.105,-0.015,-0.105,-0.015,-0.105,-0.015,-0.052,-0.015,-0.052,-0.005,-0.052,-0.005,-0.052,-0.005,-0.039,-0.005,-0.039,0.034,-0.039,0.034,-0.039,0.034,-0.052,0.034,-0.052,0.044,-0.052,0.044,-0.052,0.044,-0.092,0.044,-0.092,0.005,-0.092,0.005,-0.092,0.005,-0.105,0.005,-0.105,0.034,-0.105,0.034,-0.105,0.034,-0.119,0.034,-0.119,-0.005,-0.119,-0.083,-0.119,-0.083,-0.039,-0.083,-0.039,-0.034,-0.039,-0.034,-0.039,-0.034,-0.052,-0.034,-0.052,-0.024,-0.052,-0.024,-0.052,-0.024,-0.119,-0.024,-0.119,-0.044,-0.119,-0.044,-0.119,-0.044,-0.053,-0.044,-0.053,-0.053,-0.053,-0.053,-0.053,-0.053,-0.066,-0.053,-0.066,-0.063,-0.066,-0.063,-0.066,-0.063,-0.119,-0.063,-0.119,-0.083,-0.119,-0.209,-0.145,-0.209,-0.131,-0.209,-0.131,-0.180,-0.131,-0.180,-0.131,-0.180,-0.119,-0.180,-0.119,-0.209,-0.119,-0.209,-0.119,-0.209,-0.106,-0.209,-0.106,-0.218,-0.106,-0.218,-0.106,-0.218,-0.039,-0.218,-0.039,-0.199,-0.039,-0.199,-0.039,-0.199,-0.105,-0.199,-0.105,-0.180,-0.105,-0.180,-0.105,-0.180,-0.039,-0.180,-0.039,-0.160,-0.039,-0.160,-0.039,-0.160,-0.132,-0.160,-0.132,-0.170,-0.132,-0.170,-0.132,-0.170,-0.145,-0.170,-0.145,-0.209,-0.145,-0.267,-0.053,-0.267,-0.105,-0.267,-0.105,-0.248,-0.105,-0.248,-0.105,-0.248,-0.053,-0.248,-0.053,-0.267,-0.053,-0.286,-0.145,-0.286,-0.039,-0.286,-0.039,-0.238,-0.039,-0.238,-0.039,-0.238,-0.052,-0.238,-0.052,-0.228,-0.052,-0.228,-0.052,-0.228,-0.106,-0.228,-0.106,-0.238,-0.106,-0.238,-0.106,-0.238,-0.119,-0.238,-0.119,-0.267,-0.119,-0.267,-0.119,-0.267,-0.145,-0.267,-0.145,-0.286,-0.145,-0.335,-0.053,-0.335,-0.105,-0.335,-0.105,-0.316,-0.105,-0.316,-0.105,-0.316,-0.053,-0.316,-0.053,-0.335,-0.053,-0.354,-0.145,-0.354,-0.039,-0.354,-0.039,-0.306,-0.039,-0.306,-0.039,-0.306,-0.052,-0.306,-0.052,-0.296,-0.052,-0.296,-0.052,-0.296,-0.106,-0.296,-0.106,-0.306,-0.106,-0.306,-0.106,-0.306,-0.119,-0.306,-0.119,-0.335,-0.119,-0.335,-0.119,-0.335,-0.145,-0.335,-0.145,-0.354,-0.145,-0.403,-0.079,-0.403,-0.105,-0.403,-0.105,-0.384,-0.105,-0.384,-0.105,-0.384,-0.079,-0.384,-0.079,-0.403,-0.079,-0.422,-0.105,-0.422,-0.079,-0.422,-0.079,-0.413,-0.079,-0.413,-0.079,-0.413,-0.065,-0.413,-0.065,-0.384,-0.065,-0.384,-0.065,-0.384,-0.053,-0.384,-0.053,-0.413,-0.053,-0.413,-0.053,-0.413,-0.039,-0.413,-0.039,-0.374,-0.039,-0.374,-0.039,-0.374,-0.052,-0.374,-0.052,-0.364,-0.052,-0.364,-0.052,-0.364,-0.105,-0.364,-0.105,-0.374,-0.105,-0.374,-0.105,-0.374,-0.119,-0.374,-0.119,-0.413,-0.119,-0.413,-0.119,-0.413,-0.105,-0.413,-0.105,-0.422,-0.105,-0.500,-0.119,-0.500,-0.026,-0.500,-0.026,-0.480,-0.026,-0.480,-0.026,-0.480,-0.065,-0.480,-0.065,-0.452,-0.065,-0.452,-0.065,-0.452,-0.026,-0.452,-0.026,-0.432,-0.026,-0.432,-0.026,-0.432,-0.119,-0.432,-0.119,-0.452,-0.119,-0.452,-0.119,-0.452,-0.079,-0.452,-0.079,-0.480,-0.079,-0.480,-0.079,-0.480,-0.119,-0.480,-0.119,-0.500,-0.119,0.427,0.052,0.427,0.079,0.427,0.079,0.447,0.079,0.447,0.079,0.447,0.052,0.447,0.052,0.427,0.052,0.359,0.052,0.359,0.066,0.359,0.066,0.378,0.066,0.378,0.066,0.378,0.118,0.378,0.118,0.369,0.118,0.369,0.118,0.369,0.132,0.369,0.132,0.378,0.132,0.378,0.132,0.378,0.145,0.378,0.145,0.398,0.145,0.398,0.145,0.398,0.066,0.398,0.066,0.417,0.066,0.417,0.066,0.417,0.052,0.417,0.052,0.359,0.052,0.282,0.079,0.291,0.079,0.291,0.079,0.291,0.092,0.291,0.092,0.301,0.092,0.301,0.092,0.301,0.106,0.301,0.106,0.320,0.106,0.320,0.106,0.320,0.119,0.320,0.119,0.330,0.119,0.330,0.119,0.330,0.131,0.330,0.131,0.301,0.131,0.301,0.131,0.301,0.118,0.301,0.118,0.282,0.118,0.282,0.118,0.282,0.132,0.282,0.132,0.291,0.132,0.291,0.132,0.291,0.145,0.291,0.145,0.340,0.145,0.340,0.145,0.340,0.132,0.340,0.132,0.350,0.132,0.350,0.132,0.350,0.105,0.350,0.105,0.340,0.105,0.340,0.105,0.340,0.092,0.340,0.092,0.330,0.092,0.330,0.092,0.330,0.079,0.330,0.079,0.311,0.079,0.311,0.079,0.311,0.066,0.311,0.066,0.350,0.066,0.350,0.066,0.350,0.052,0.350,0.052,0.282,0.052,0.282,0.052,0.282,0.079,0.224,0.079,0.233,0.079,0.233,0.079,0.233,0.066,0.233,0.066,0.252,0.066,0.252,0.066,0.252,0.118,0.252,0.118,0.242,0.118,0.242,0.118,0.242,0.131,0.242,0.131,0.224,0.131,0.224,0.131,0.224,0.079,0.213,0.065,0.213,0.079,0.213,0.079,0.204,0.079,0.204,0.079,0.204,0.119,0.204,0.119,0.213,0.119,0.213,0.119,0.213,0.132,0.213,0.132,0.223,0.132,0.223,0.132,0.223,0.145,0.223,0.145,0.253,0.145,0.253,0.145,0.253,0.132,0.253,0.132,0.262,0.132,0.262,0.132,0.262,0.119,0.262,0.119,0.272,0.119,0.272,0.119,0.272,0.079,0.272,0.079,0.262,0.079,0.262,0.079,0.262,0.065,0.262,0.065,0.253,0.065,0.253,0.065,0.253,0.052,0.253,0.052,0.223,0.052,0.223,0.052,0.223,0.065,0.223,0.065,0.213,0.065,0.126,0.079,0.136,0.079,0.136,0.079,0.136,0.092,0.136,0.092,0.146,0.092,0.146,0.092,0.146,0.106,0.146,0.106,0.165,0.106,0.165,0.106,0.165,0.119,0.165,0.119,0.174,0.119,0.174,0.119,0.174,0.131,0.174,0.131,0.146,0.131,0.146,0.131,0.146,0.118,0.146,0.118,0.126,0.118,0.126,0.118,0.126,0.132,0.126,0.132,0.136,0.132,0.136,0.132,0.136,0.145,0.136,0.145,0.185,0.145,0.185,0.145,0.185,0.132,0.185,0.132,0.194,0.132,0.194,0.132,0.194,0.105,0.194,0.105,0.185,0.105,0.185,0.105,0.185,0.092,0.185,0.092,0.175,0.092,0.175,0.092,0.175,0.079,0.175,0.079,0.156,0.079,0.156,0.079,0.156,0.066,0.156,0.066,0.194,0.066,0.194,0.066,0.194,0.052,0.194,0.052,0.126,0.052,0.126,0.052,0.126,0.079,0.000,0.079,0.010,0.079,0.010,0.079,0.010,0.066,0.010,0.066,0.029,0.066,0.029,0.066,0.029,0.118,0.029,0.118,0.019,0.118,0.019,0.118,0.019,0.131,0.019,0.131,0.000,0.131,0.000,0.131,0.000,0.079,-0.010,0.065,-0.010,0.079,-0.010,0.079,-0.019,0.079,-0.019,0.079,-0.019,0.119,-0.019,0.119,-0.010,0.119,-0.010,0.119,-0.010,0.132,-0.010,0.132,-0.000,0.132,-0.000,0.132,-0.000,0.145,-0.000,0.145,0.029,0.145,0.029,0.145,0.029,0.132,0.029,0.132,0.039,0.132,0.039,0.132,0.039,0.119,0.039,0.119,0.049,0.119,0.049,0.119,0.049,0.079,0.049,0.079,0.039,0.079,0.039,0.079,0.039,0.065,0.039,0.065,0.029,0.065,0.029,0.065,0.029,0.052,0.029,0.052,-0.000,0.052,-0.000,0.052,-0.000,0.065,-0.000,0.065,-0.010,0.065,-0.087,0.052,-0.087,0.066,-0.087,0.066,-0.068,0.066,-0.068,0.066,-0.068,0.118,-0.068,0.118,-0.078,0.118,-0.078,0.118,-0.078,0.132,-0.078,0.132,-0.068,0.132,-0.068,0.132,-0.068,0.145,-0.068,0.145,-0.048,0.145,-0.048,0.145,-0.048,0.066,-0.048,0.066,-0.029,0.066,-0.029,0.066,-0.029,0.052,-0.029,0.052,-0.087,0.052,-0.165,0.079,-0.155,0.079,-0.155,0.079,-0.155,0.092,-0.155,0.092,-0.146,0.092,-0.146,0.092,-0.146,0.106,-0.146,0.106,-0.127,0.106,-0.127,0.106,-0.127,0.119,-0.127,0.119,-0.117,0.119,-0.117,0.119,-0.117,0.131,-0.117,0.131,-0.145,0.131,-0.145,0.131,-0.145,0.118,-0.145,0.118,-0.165,0.118,-0.165,0.118,-0.165,0.132,-0.165,0.132,-0.155,0.132,-0.155,0.132,-0.155,0.145,-0.155,0.145,-0.107,0.145,-0.107,0.145,-0.107,0.132,-0.107,0.132,-0.097,0.132,-0.097,0.132,-0.097,0.105,-0.097,0.105,-0.107,0.105,-0.107,0.105,-0.107,0.092,-0.107,0.092,-0.116,0.092,-0.116,0.092,-0.116,0.079,-0.116,0.079,-0.136,0.079,-0.136,0.079,-0.136,0.066,-0.136,0.066,-0.097,0.066,-0.097,0.066,-0.097,0.052,-0.097,0.052,-0.165,0.052,-0.165,0.052,-0.165,0.079,-0.243,0.052,-0.243,0.132,-0.243,0.132,-0.213,0.132,-0.213,0.132,-0.213,0.119,-0.213,0.119,-0.204,0.119,-0.204,0.119,-0.204,0.132,-0.204,0.132,-0.184,0.132,-0.184,0.132,-0.184,0.119,-0.184,0.119,-0.175,0.119,-0.175,0.119,-0.175,0.052,-0.175,0.052,-0.195,0.052,-0.195,0.052,-0.195,0.079,-0.195,0.079,-0.204,0.079,-0.204,0.079,-0.204,0.065,-0.204,0.065,-0.214,0.065,-0.214,0.065,-0.214,0.079,-0.214,0.079,-0.223,0.079,-0.223,0.079,-0.223,0.052,-0.223,0.052,-0.243,0.052,-0.291,0.092,-0.291,0.066,-0.291,0.066,-0.272,0.066,-0.272,0.066,-0.272,0.092,-0.272,0.092,-0.291,0.092,-0.311,0.065,-0.311,0.092,-0.311,0.092,-0.301,0.092,-0.301,0.092,-0.301,0.106,-0.301,0.106,-0.272,0.106,-0.272,0.106,-0.272,0.118,-0.272,0.118,-0.301,0.118,-0.301,0.118,-0.301,0.132,-0.301,0.132,-0.262,0.132,-0.262,0.132,-0.262,0.119,-0.262,0.119,-0.252,0.119,-0.252,0.119,-0.252,0.065,-0.252,0.065,-0.262,0.065,-0.262,0.065,-0.262,0.052,-0.262,0.052,-0.301,0.052,-0.301,0.052,-0.301,0.065,-0.301,0.065,-0.311,0.065,-0.359,0.118,-0.359,0.092,-0.359,0.092,-0.340,0.092,-0.340,0.092,-0.340,0.118,-0.340,0.118,-0.359,0.118,-0.369,0.052,-0.369,0.065,-0.369,0.065,-0.379,0.065,-0.379,0.065,-0.379,0.119,-0.379,0.119,-0.369,0.119,-0.369,0.119,-0.369,0.132,-0.369,0.132,-0.330,0.132,-0.330,0.132,-0.330,0.119,-0.330,0.119,-0.320,0.119,-0.320,0.119,-0.320,0.079,-0.320,0.079,-0.359,0.079,-0.359,0.079,-0.359,0.066,-0.359,0.066,-0.330,0.066,-0.330,0.066,-0.330,0.052,-0.330,0.052,-0.369,0.052,-0.427,0.052,-0.427,0.131,-0.427,0.131,-0.447,0.131,-0.447,0.131,-0.447,0.145,-0.447,0.145,-0.388,0.145,-0.388,0.145,-0.388,0.131,-0.388,0.131,-0.408,0.131,-0.408,0.131,-0.408,0.052,-0.408,0.052,-0.427,0.052);

const int npts3 = 584;
const float path3[npts3] = float[npts3](0.467,-0.081,0.467,-0.016,0.467,-0.016,0.500,-0.016,0.500,-0.016,0.500,-0.081,0.500,-0.081,0.467,-0.081,0.401,-0.081,0.401,-0.049,0.401,-0.049,0.385,-0.049,0.385,-0.049,0.385,0.079,0.385,0.079,0.369,0.079,0.369,0.079,0.369,0.113,0.369,0.113,0.385,0.113,0.385,0.113,0.385,0.145,0.385,0.145,0.418,0.145,0.418,0.145,0.418,0.113,0.418,0.113,0.435,0.113,0.435,0.113,0.435,0.079,0.435,0.079,0.418,0.079,0.418,0.079,0.418,-0.047,0.418,-0.047,0.451,-0.047,0.451,-0.047,0.451,-0.081,0.451,-0.081,0.401,-0.081,0.287,-0.081,0.287,0.047,0.287,0.047,0.270,0.047,0.270,0.047,0.270,0.081,0.270,0.081,0.287,0.081,0.287,0.081,0.287,0.113,0.287,0.113,0.303,0.113,0.303,0.113,0.303,0.145,0.303,0.145,0.352,0.145,0.352,0.145,0.352,0.111,0.352,0.111,0.320,0.111,0.320,0.111,0.320,0.081,0.320,0.081,0.336,0.081,0.336,0.081,0.336,0.047,0.336,0.047,0.320,0.047,0.320,0.047,0.320,-0.081,0.320,-0.081,0.287,-0.081,0.189,0.015,0.189,-0.047,0.189,-0.047,0.221,-0.047,0.221,-0.047,0.221,0.015,0.221,0.015,0.189,0.015,0.156,-0.049,0.156,0.017,0.156,0.017,0.172,0.017,0.172,0.017,0.172,0.049,0.172,0.049,0.221,0.049,0.221,0.049,0.221,0.079,0.221,0.079,0.172,0.079,0.172,0.079,0.172,0.113,0.172,0.113,0.238,0.113,0.238,0.113,0.238,0.081,0.238,0.081,0.254,0.081,0.254,0.081,0.254,-0.049,0.254,-0.049,0.238,-0.049,0.238,-0.049,0.238,-0.081,0.238,-0.081,0.172,-0.081,0.172,-0.081,0.172,-0.049,0.172,-0.049,0.156,-0.049,0.041,-0.049,0.041,-0.015,0.041,-0.015,0.074,-0.015,0.074,-0.015,0.074,-0.047,0.074,-0.047,0.106,-0.047,0.106,-0.047,0.106,0.015,0.106,0.015,0.057,0.015,0.057,0.015,0.057,0.047,0.057,0.047,0.041,0.047,0.041,0.047,0.041,0.081,0.041,0.081,0.057,0.081,0.057,0.081,0.057,0.113,0.057,0.113,0.123,0.113,0.123,0.113,0.123,0.079,0.123,0.079,0.074,0.079,0.074,0.079,0.074,0.049,0.074,0.049,0.123,0.049,0.123,0.049,0.123,0.017,0.123,0.017,0.139,0.017,0.139,0.017,0.139,-0.049,0.139,-0.049,0.123,-0.049,0.123,-0.049,0.123,-0.081,0.123,-0.081,0.057,-0.081,0.057,-0.081,0.057,-0.049,0.057,-0.049,0.041,-0.049,-0.009,-0.081,-0.009,0.111,-0.009,0.111,-0.025,0.111,-0.025,0.111,-0.025,0.145,-0.025,0.145,0.025,0.145,0.025,0.145,0.025,-0.081,0.025,-0.081,-0.009,-0.081,-0.106,0.079,-0.106,0.017,-0.106,0.017,-0.074,0.017,-0.074,0.017,-0.074,0.079,-0.074,0.079,-0.106,0.079,-0.123,-0.081,-0.123,-0.049,-0.123,-0.049,-0.139,-0.049,-0.139,-0.049,-0.139,0.081,-0.139,0.081,-0.123,0.081,-0.123,0.081,-0.123,0.113,-0.123,0.113,-0.057,0.113,-0.057,0.113,-0.057,0.081,-0.057,0.081,-0.041,0.081,-0.041,0.081,-0.041,-0.017,-0.041,-0.017,-0.106,-0.017,-0.106,-0.017,-0.106,-0.047,-0.106,-0.047,-0.057,-0.047,-0.057,-0.047,-0.057,-0.081,-0.057,-0.081,-0.123,-0.081,-0.221,-0.047,-0.189,-0.047,-0.189,-0.047,-0.189,0.079,-0.189,0.079,-0.221,0.079,-0.221,0.079,-0.221,-0.047,-0.238,-0.145,-0.238,-0.111,-0.238,-0.111,-0.189,-0.111,-0.189,-0.111,-0.189,-0.081,-0.189,-0.081,-0.238,-0.081,-0.238,-0.081,-0.238,-0.049,-0.238,-0.049,-0.254,-0.049,-0.254,-0.049,-0.254,0.081,-0.254,0.081,-0.238,0.081,-0.238,0.081,-0.238,0.113,-0.238,0.113,-0.156,0.113,-0.156,0.113,-0.156,-0.113,-0.156,-0.113,-0.172,-0.113,-0.172,-0.113,-0.172,-0.145,-0.172,-0.145,-0.238,-0.145,-0.369,-0.081,-0.369,0.113,-0.369,0.113,-0.270,0.113,-0.270,0.113,-0.270,0.079,-0.270,0.079,-0.319,0.079,-0.319,0.079,-0.319,0.047,-0.319,0.047,-0.336,0.047,-0.336,0.047,-0.336,-0.081,-0.336,-0.081,-0.369,-0.081,-0.467,-0.047,-0.419,-0.047,-0.419,-0.047,-0.419,0.111,-0.419,0.111,-0.467,0.111,-0.467,0.111,-0.467,-0.047,-0.484,-0.081,-0.484,-0.049,-0.484,-0.049,-0.500,-0.049,-0.500,-0.049,-0.500,0.113,-0.500,0.113,-0.484,0.113,-0.484,0.113,-0.484,0.145,-0.484,0.145,-0.401,0.145,-0.401,0.145,-0.401,0.113,-0.401,0.113,-0.385,0.113,-0.385,0.113,-0.385,-0.049,-0.385,-0.049,-0.401,-0.049,-0.401,-0.049,-0.401,-0.081,-0.401,-0.081,-0.484,-0.081);

const int npts4 = 616;
const float path4[npts4] = float[npts4](0.472,-0.145,0.472,-0.072,0.472,-0.072,0.500,-0.072,0.500,-0.072,0.500,-0.145,0.500,-0.145,0.472,-0.145,0.402,-0.107,0.429,-0.107,0.429,-0.107,0.429,0.035,0.429,0.035,0.402,0.035,0.402,0.035,0.402,-0.107,0.387,-0.145,0.387,-0.109,0.387,-0.109,0.373,-0.109,0.373,-0.109,0.373,0.037,0.373,0.037,0.387,0.037,0.387,0.037,0.387,0.073,0.387,0.073,0.429,0.073,0.429,0.073,0.429,0.109,0.429,0.109,0.458,0.109,0.458,0.109,0.458,-0.145,0.458,-0.145,0.387,-0.145,0.331,0.107,0.331,0.145,0.331,0.145,0.359,0.145,0.359,0.145,0.359,0.107,0.359,0.107,0.331,0.107,0.331,-0.145,0.331,0.035,0.331,0.035,0.317,0.035,0.317,0.035,0.317,0.073,0.317,0.073,0.359,0.073,0.359,0.073,0.359,-0.145,0.359,-0.145,0.331,-0.145,0.246,-0.145,0.246,-0.109,0.246,-0.109,0.232,-0.109,0.232,-0.109,0.232,-0.073,0.232,-0.073,0.218,-0.073,0.218,-0.073,0.218,0.072,0.218,0.072,0.247,0.072,0.247,0.072,0.247,-0.071,0.247,-0.071,0.274,-0.071,0.274,-0.071,0.274,0.072,0.274,0.072,0.303,0.072,0.303,0.072,0.303,-0.073,0.303,-0.073,0.289,-0.073,0.289,-0.073,0.289,-0.109,0.289,-0.109,0.275,-0.109,0.275,-0.109,0.275,-0.145,0.275,-0.145,0.246,-0.145,0.148,-0.107,0.176,-0.107,0.176,-0.107,0.176,0.035,0.176,0.035,0.148,0.035,0.148,0.035,0.148,-0.107,0.134,-0.145,0.134,-0.109,0.134,-0.109,0.120,-0.109,0.120,-0.109,0.120,0.037,0.120,0.037,0.134,0.037,0.134,0.037,0.134,0.072,0.134,0.072,0.190,0.072,0.190,0.072,0.190,0.037,0.190,0.037,0.204,0.037,0.204,0.037,0.204,-0.109,0.204,-0.109,0.190,-0.109,0.190,-0.109,0.190,-0.145,0.190,-0.145,0.134,-0.145,0.021,-0.109,0.021,-0.073,0.021,-0.073,0.007,-0.073,0.007,-0.073,0.007,0.037,0.007,0.037,0.021,0.037,0.021,0.037,0.021,0.073,0.021,0.073,0.035,0.073,0.035,0.073,0.035,0.109,0.035,0.109,0.092,0.109,0.092,0.109,0.092,0.073,0.092,0.073,0.106,0.073,0.106,0.073,0.106,0.035,0.106,0.035,0.077,0.035,0.077,0.035,0.077,0.071,0.077,0.071,0.050,0.071,0.050,0.071,0.050,0.035,0.050,0.035,0.036,0.035,0.036,0.035,0.036,-0.071,0.036,-0.071,0.050,-0.071,0.050,-0.071,0.050,-0.107,0.050,-0.107,0.077,-0.107,0.077,-0.107,0.077,-0.071,0.077,-0.071,0.106,-0.071,0.106,-0.071,0.106,-0.109,0.106,-0.109,0.092,-0.109,0.092,-0.109,0.092,-0.145,0.092,-0.145,0.035,-0.145,0.035,-0.145,0.035,-0.109,0.035,-0.109,0.021,-0.109,-0.190,-0.145,-0.190,0.109,-0.190,0.109,-0.162,0.109,-0.162,0.109,-0.162,-0.035,-0.162,-0.035,-0.148,-0.035,-0.148,-0.035,-0.148,0.001,-0.148,0.001,-0.134,0.001,-0.134,0.001,-0.134,0.073,-0.134,0.073,-0.106,0.073,-0.106,0.073,-0.106,-0.001,-0.106,-0.001,-0.120,-0.001,-0.120,-0.001,-0.120,-0.037,-0.120,-0.037,-0.134,-0.037,-0.134,-0.037,-0.134,-0.071,-0.134,-0.071,-0.120,-0.071,-0.120,-0.071,-0.120,-0.107,-0.120,-0.107,-0.106,-0.107,-0.106,-0.107,-0.106,-0.145,-0.106,-0.145,-0.134,-0.145,-0.134,-0.145,-0.134,-0.109,-0.134,-0.109,-0.148,-0.109,-0.148,-0.109,-0.148,-0.073,-0.148,-0.073,-0.162,-0.073,-0.162,-0.073,-0.162,-0.145,-0.162,-0.145,-0.190,-0.145,-0.275,-0.145,-0.275,-0.109,-0.275,-0.109,-0.289,-0.109,-0.289,-0.109,-0.289,0.037,-0.289,0.037,-0.275,0.037,-0.275,0.037,-0.275,0.072,-0.275,0.072,-0.218,0.072,-0.218,0.072,-0.218,0.037,-0.218,0.037,-0.204,0.037,-0.204,0.037,-0.204,-0.001,-0.204,-0.001,-0.233,-0.001,-0.233,-0.001,-0.233,0.035,-0.233,0.035,-0.260,0.035,-0.260,0.035,-0.260,-0.107,-0.260,-0.107,-0.233,-0.107,-0.233,-0.107,-0.233,-0.071,-0.233,-0.071,-0.204,-0.071,-0.204,-0.071,-0.204,-0.109,-0.204,-0.109,-0.218,-0.109,-0.218,-0.109,-0.218,-0.145,-0.218,-0.145,-0.275,-0.145,-0.373,-0.145,-0.373,-0.109,-0.373,-0.109,-0.387,-0.109,-0.387,-0.109,-0.387,0.072,-0.387,0.072,-0.359,0.072,-0.359,0.072,-0.359,-0.107,-0.359,-0.107,-0.345,-0.107,-0.345,-0.107,-0.345,-0.071,-0.345,-0.071,-0.331,-0.071,-0.331,-0.071,-0.331,0.072,-0.331,0.072,-0.303,0.072,-0.303,0.072,-0.303,-0.145,-0.303,-0.145,-0.373,-0.145,-0.500,-0.145,-0.500,0.109,-0.500,0.109,-0.401,0.109,-0.401,0.109,-0.401,0.071,-0.401,0.071,-0.471,0.071,-0.471,0.071,-0.471,0.001,-0.471,0.001,-0.415,0.001,-0.415,0.001,-0.415,-0.037,-0.415,-0.037,-0.471,-0.037,-0.471,-0.037,-0.471,-0.145,-0.471,-0.145,-0.500,-0.145);

const int npts5 = 1128;
const float path5[npts5] = float[npts5](0.485,-0.087,0.485,-0.029,0.485,-0.029,0.500,-0.029,0.500,-0.029,0.500,-0.087,0.500,-0.087,0.485,-0.087,0.446,-0.087,0.446,0.028,0.446,0.028,0.439,0.028,0.439,0.028,0.439,0.058,0.439,0.058,0.446,0.058,0.446,0.058,0.446,0.087,0.446,0.087,0.454,0.087,0.454,0.087,0.454,0.116,0.454,0.116,0.477,0.116,0.477,0.116,0.477,0.086,0.477,0.086,0.462,0.086,0.462,0.086,0.462,0.058,0.462,0.058,0.470,0.058,0.470,0.058,0.470,0.028,0.470,0.028,0.462,0.028,0.462,0.028,0.462,-0.087,0.462,-0.087,0.446,-0.087,0.401,0.057,0.401,-0.057,0.401,-0.057,0.416,-0.057,0.416,-0.057,0.416,0.057,0.416,0.057,0.401,0.057,0.385,-0.145,0.385,0.087,0.385,0.087,0.424,0.087,0.424,0.087,0.424,0.058,0.424,0.058,0.431,0.058,0.431,0.058,0.431,-0.059,0.431,-0.059,0.424,-0.059,0.424,-0.059,0.424,-0.087,0.424,-0.087,0.401,-0.087,0.401,-0.087,0.401,-0.145,0.401,-0.145,0.385,-0.145,0.348,-0.057,0.362,-0.057,0.362,-0.057,0.362,0.057,0.362,0.057,0.348,0.057,0.348,0.057,0.348,-0.057,0.340,-0.087,0.340,-0.058,0.340,-0.058,0.332,-0.058,0.332,-0.058,0.332,0.058,0.332,0.058,0.340,0.058,0.340,0.058,0.340,0.087,0.340,0.087,0.370,0.087,0.370,0.087,0.370,0.058,0.370,0.058,0.378,0.058,0.378,0.058,0.378,-0.058,0.378,-0.058,0.370,-0.058,0.370,-0.058,0.370,-0.087,0.370,-0.087,0.340,-0.087,0.301,-0.087,0.301,-0.058,0.301,-0.058,0.294,-0.058,0.294,-0.058,0.294,0.057,0.294,0.057,0.286,0.057,0.286,0.057,0.286,0.087,0.286,0.087,0.294,0.087,0.294,0.087,0.294,0.116,0.294,0.116,0.309,0.116,0.309,0.116,0.309,0.087,0.309,0.087,0.317,0.087,0.317,0.087,0.317,0.057,0.317,0.057,0.309,0.057,0.309,0.057,0.309,-0.057,0.309,-0.057,0.324,-0.057,0.324,-0.057,0.324,-0.087,0.324,-0.087,0.301,-0.087,0.233,-0.087,0.233,0.087,0.233,0.087,0.271,0.087,0.271,0.087,0.271,0.058,0.271,0.058,0.279,0.058,0.279,0.058,0.279,-0.087,0.279,-0.087,0.263,-0.087,0.263,-0.087,0.263,0.057,0.263,0.057,0.256,0.057,0.256,0.057,0.256,0.028,0.256,0.028,0.248,0.028,0.248,0.028,0.248,-0.087,0.248,-0.087,0.233,-0.087,0.210,0.115,0.210,0.145,0.210,0.145,0.225,0.145,0.225,0.145,0.225,0.115,0.225,0.115,0.210,0.115,0.210,-0.087,0.210,0.057,0.210,0.057,0.202,0.057,0.202,0.057,0.202,0.087,0.202,0.087,0.225,0.087,0.225,0.087,0.225,-0.087,0.225,-0.087,0.210,-0.087,0.164,0.057,0.164,0.001,0.164,0.001,0.179,0.001,0.179,0.001,0.179,0.057,0.179,0.057,0.164,0.057,0.156,-0.087,0.156,-0.058,0.156,-0.058,0.149,-0.058,0.149,-0.058,0.149,0.058,0.149,0.058,0.156,0.058,0.156,0.058,0.156,0.087,0.156,0.087,0.187,0.087,0.187,0.087,0.187,0.058,0.187,0.058,0.195,0.058,0.195,0.058,0.195,-0.030,0.195,-0.030,0.164,-0.030,0.164,-0.030,0.164,-0.057,0.164,-0.057,0.187,-0.057,0.187,-0.057,0.187,-0.087,0.187,-0.087,0.156,-0.087,0.095,-0.087,0.095,0.087,0.095,0.087,0.141,0.087,0.141,0.087,0.141,0.057,0.141,0.057,0.118,0.057,0.118,0.057,0.118,0.028,0.118,0.028,0.111,0.028,0.111,0.028,0.111,-0.087,0.111,-0.087,0.095,-0.087,0.057,0.057,0.057,0.001,0.057,0.001,0.072,0.001,0.072,0.001,0.072,0.057,0.072,0.057,0.057,0.057,0.050,-0.087,0.050,-0.058,0.050,-0.058,0.042,-0.058,0.042,-0.058,0.042,0.058,0.042,0.058,0.050,0.058,0.050,0.058,0.050,0.087,0.050,0.087,0.080,0.087,0.080,0.087,0.080,0.058,0.080,0.058,0.088,0.058,0.088,0.058,0.088,-0.030,0.088,-0.030,0.057,-0.030,0.057,-0.030,0.057,-0.057,0.057,-0.057,0.080,-0.057,0.080,-0.057,0.080,-0.087,0.080,-0.087,0.050,-0.087,0.027,-0.058,0.027,-0.087,0.027,-0.087,-0.011,-0.087,-0.011,-0.087,-0.011,0.116,-0.011,0.116,0.004,0.116,0.004,0.116,0.004,0.087,0.004,0.087,0.027,0.087,0.027,0.087,0.027,0.058,0.027,0.058,0.034,0.058,0.034,0.058,0.034,-0.058,0.034,-0.058,0.027,-0.058,0.004,-0.057,0.019,-0.057,0.019,-0.057,0.019,0.057,0.019,0.057,0.004,0.057,0.004,0.057,0.004,-0.057,-0.057,-0.087,-0.057,-0.058,-0.057,-0.058,-0.065,-0.058,-0.065,-0.058,-0.065,0.087,-0.065,0.087,-0.049,0.087,-0.049,0.087,-0.049,-0.057,-0.049,-0.057,-0.042,-0.057,-0.042,-0.057,-0.042,-0.028,-0.042,-0.028,-0.035,-0.028,-0.035,-0.028,-0.035,0.087,-0.035,0.087,-0.019,0.087,-0.019,0.087,-0.019,-0.087,-0.019,-0.087,-0.057,-0.087,-0.103,-0.001,-0.103,-0.057,-0.103,-0.057,-0.088,-0.057,-0.088,-0.057,-0.088,-0.001,-0.088,-0.001,-0.103,-0.001,-0.118,-0.058,-0.118,0.001,-0.118,0.001,-0.111,0.001,-0.111,0.001,-0.111,0.030,-0.111,0.030,-0.088,0.030,-0.088,0.030,-0.088,0.057,-0.088,0.057,-0.111,0.057,-0.111,0.057,-0.111,0.087,-0.111,0.087,-0.080,0.087,-0.080,0.087,-0.080,0.058,-0.080,0.058,-0.073,0.058,-0.073,0.058,-0.073,-0.058,-0.073,-0.058,-0.080,-0.058,-0.080,-0.058,-0.080,-0.087,-0.080,-0.087,-0.111,-0.087,-0.111,-0.087,-0.111,-0.058,-0.111,-0.058,-0.118,-0.058,-0.172,-0.087,-0.172,0.087,-0.172,0.087,-0.126,0.087,-0.126,0.087,-0.126,0.057,-0.126,0.057,-0.149,0.057,-0.149,0.057,-0.149,0.028,-0.149,0.028,-0.156,0.028,-0.156,0.028,-0.156,-0.087,-0.156,-0.087,-0.172,-0.087,-0.225,-0.087,-0.225,0.116,-0.225,0.116,-0.210,0.116,-0.210,0.116,-0.210,0.087,-0.210,0.087,-0.187,0.087,-0.187,0.087,-0.187,0.058,-0.187,0.058,-0.179,0.058,-0.179,0.058,-0.179,-0.087,-0.179,-0.087,-0.195,-0.087,-0.195,-0.087,-0.195,0.057,-0.195,0.057,-0.202,0.057,-0.202,0.057,-0.202,0.028,-0.202,0.028,-0.210,0.028,-0.210,0.028,-0.210,-0.087,-0.210,-0.087,-0.225,-0.087,-0.271,-0.087,-0.271,-0.058,-0.271,-0.058,-0.279,-0.058,-0.279,-0.058,-0.279,0.058,-0.279,0.058,-0.271,0.058,-0.271,0.058,-0.271,0.087,-0.271,0.087,-0.240,0.087,-0.240,0.087,-0.240,0.058,-0.240,0.058,-0.233,0.058,-0.233,0.058,-0.233,0.028,-0.233,0.028,-0.248,0.028,-0.248,0.028,-0.248,0.057,-0.248,0.057,-0.263,0.057,-0.263,0.057,-0.263,-0.057,-0.263,-0.057,-0.248,-0.057,-0.248,-0.057,-0.248,-0.028,-0.248,-0.028,-0.233,-0.028,-0.233,-0.028,-0.233,-0.058,-0.233,-0.058,-0.240,-0.058,-0.240,-0.058,-0.240,-0.087,-0.240,-0.087,-0.271,-0.087,-0.332,-0.058,-0.332,-0.028,-0.332,-0.028,-0.317,-0.028,-0.317,-0.028,-0.317,-0.057,-0.317,-0.057,-0.302,-0.057,-0.302,-0.057,-0.302,-0.001,-0.302,-0.001,-0.325,-0.001,-0.325,-0.001,-0.325,0.028,-0.325,0.028,-0.332,0.028,-0.332,0.028,-0.332,0.058,-0.332,0.058,-0.325,0.058,-0.325,0.058,-0.325,0.087,-0.325,0.087,-0.294,0.087,-0.294,0.087,-0.294,0.057,-0.294,0.057,-0.317,0.057,-0.317,0.057,-0.317,0.030,-0.317,0.030,-0.294,0.030,-0.294,0.030,-0.294,0.001,-0.294,0.001,-0.286,0.001,-0.286,0.001,-0.286,-0.058,-0.286,-0.058,-0.294,-0.058,-0.294,-0.058,-0.294,-0.087,-0.294,-0.087,-0.325,-0.087,-0.325,-0.087,-0.325,-0.058,-0.325,-0.058,-0.332,-0.058,-0.347,-0.058,-0.347,-0.087,-0.347,-0.087,-0.385,-0.087,-0.385,-0.087,-0.385,0.116,-0.385,0.116,-0.370,0.116,-0.370,0.116,-0.370,0.087,-0.370,0.087,-0.347,0.087,-0.347,0.087,-0.347,0.058,-0.347,0.058,-0.340,0.058,-0.340,0.058,-0.340,-0.058,-0.340,-0.058,-0.347,-0.058,-0.370,-0.057,-0.355,-0.057,-0.355,-0.057,-0.355,0.057,-0.355,0.057,-0.370,0.057,-0.370,0.057,-0.370,-0.057,-0.431,-0.087,-0.431,-0.058,-0.431,-0.058,-0.439,-0.058,-0.439,-0.058,-0.439,0.087,-0.439,0.087,-0.423,0.087,-0.423,0.087,-0.423,-0.057,-0.423,-0.057,-0.416,-0.057,-0.416,-0.057,-0.416,-0.028,-0.416,-0.028,-0.409,-0.028,-0.409,-0.028,-0.409,0.087,-0.409,0.087,-0.393,0.087,-0.393,0.087,-0.393,-0.087,-0.393,-0.087,-0.431,-0.087,-0.500,-0.087,-0.500,0.116,-0.500,0.116,-0.484,0.116,-0.484,0.116,-0.484,0.030,-0.484,0.030,-0.462,0.030,-0.462,0.030,-0.462,0.116,-0.462,0.116,-0.447,0.116,-0.447,0.116,-0.447,-0.087,-0.447,-0.087,-0.462,-0.087,-0.462,-0.087,-0.462,-0.001,-0.462,-0.001,-0.484,-0.001,-0.484,-0.001,-0.484,-0.087,-0.484,-0.087,-0.500,-0.087);

// const int npts6 = 544;
// const float path6[npts6] = float[npts6](0.463,-0.145,0.463,-0.062,0.463,-0.062,0.500,-0.062,0.500,-0.062,0.500,-0.145,0.500,-0.145,0.463,-0.145,0.353,-0.060,0.371,-0.060,0.371,-0.060,0.371,-0.102,0.371,-0.102,0.407,-0.102,0.407,-0.102,0.407,0.060,0.407,0.060,0.388,0.060,0.388,0.060,0.388,0.102,0.388,0.102,0.353,0.102,0.353,0.102,0.353,-0.060,0.333,-0.104,0.333,-0.063,0.333,-0.063,0.315,-0.063,0.315,-0.063,0.315,0.063,0.315,0.063,0.333,0.063,0.333,0.063,0.333,0.104,0.333,0.104,0.352,0.104,0.352,0.104,0.352,0.145,0.352,0.145,0.408,0.145,0.408,0.145,0.408,0.104,0.408,0.104,0.426,0.104,0.426,0.104,0.426,0.063,0.426,0.063,0.444,0.063,0.444,0.063,0.444,-0.063,0.444,-0.063,0.426,-0.063,0.426,-0.063,0.426,-0.104,0.426,-0.104,0.408,-0.104,0.408,-0.104,0.408,-0.145,0.408,-0.145,0.352,-0.145,0.352,-0.145,0.352,-0.104,0.352,-0.104,0.333,-0.104,0.185,-0.145,0.185,-0.102,0.185,-0.102,0.222,-0.102,0.222,-0.102,0.222,0.060,0.222,0.060,0.204,0.060,0.204,0.060,0.204,0.104,0.204,0.104,0.222,0.104,0.222,0.104,0.222,0.145,0.222,0.145,0.260,0.145,0.260,0.145,0.260,-0.102,0.260,-0.102,0.296,-0.102,0.296,-0.102,0.296,-0.145,0.296,-0.145,0.185,-0.145,0.037,-0.060,0.055,-0.060,0.055,-0.060,0.055,-0.019,0.055,-0.019,0.074,-0.019,0.074,-0.019,0.074,0.022,0.074,0.022,0.111,0.022,0.111,0.022,0.111,0.063,0.111,0.063,0.129,0.063,0.129,0.063,0.129,0.102,0.129,0.102,0.075,0.102,0.075,0.102,0.075,0.060,0.075,0.060,0.037,0.060,0.037,0.060,0.037,0.104,0.037,0.104,0.055,0.104,0.055,0.104,0.055,0.145,0.055,0.145,0.148,0.145,0.148,0.145,0.148,0.104,0.148,0.104,0.167,0.104,0.167,0.104,0.167,0.019,0.167,0.019,0.148,0.019,0.148,0.019,0.148,-0.022,0.148,-0.022,0.130,-0.022,0.130,-0.022,0.130,-0.063,0.130,-0.063,0.093,-0.063,0.093,-0.063,0.093,-0.102,0.093,-0.102,0.167,-0.102,0.167,-0.102,0.167,-0.145,0.167,-0.145,0.037,-0.145,0.037,-0.145,0.037,-0.060,-0.111,-0.145,-0.111,0.104,-0.111,0.104,-0.055,0.104,-0.055,0.104,-0.055,0.063,-0.055,0.063,-0.038,0.063,-0.038,0.063,-0.038,0.104,-0.038,0.104,0.000,0.104,0.000,0.104,0.000,0.063,0.000,0.063,0.019,0.063,0.019,0.063,0.019,-0.145,0.019,-0.145,-0.019,-0.145,-0.019,-0.145,-0.019,-0.063,-0.019,-0.063,-0.037,-0.063,-0.037,-0.063,-0.037,-0.104,-0.037,-0.104,-0.056,-0.104,-0.056,-0.104,-0.056,-0.063,-0.056,-0.063,-0.073,-0.063,-0.073,-0.063,-0.073,-0.145,-0.073,-0.145,-0.111,-0.145,-0.203,-0.022,-0.203,-0.102,-0.203,-0.102,-0.167,-0.102,-0.167,-0.102,-0.167,-0.022,-0.167,-0.022,-0.203,-0.022,-0.241,-0.104,-0.241,-0.020,-0.241,-0.020,-0.222,-0.020,-0.222,-0.020,-0.222,0.022,-0.222,0.022,-0.167,0.022,-0.167,0.022,-0.167,0.060,-0.167,0.060,-0.222,0.060,-0.222,0.060,-0.222,0.104,-0.222,0.104,-0.148,0.104,-0.148,0.104,-0.148,0.063,-0.148,0.063,-0.130,0.063,-0.130,0.063,-0.130,-0.104,-0.130,-0.104,-0.148,-0.104,-0.148,-0.104,-0.148,-0.145,-0.148,-0.145,-0.222,-0.145,-0.222,-0.145,-0.222,-0.104,-0.222,-0.104,-0.241,-0.104,-0.333,0.060,-0.333,-0.020,-0.333,-0.020,-0.297,-0.020,-0.297,-0.020,-0.297,0.060,-0.297,0.060,-0.333,0.060,-0.352,-0.145,-0.352,-0.104,-0.352,-0.104,-0.370,-0.104,-0.370,-0.104,-0.370,0.063,-0.370,0.063,-0.352,0.063,-0.352,0.063,-0.352,0.104,-0.352,0.104,-0.278,0.104,-0.278,0.104,-0.278,0.063,-0.278,0.063,-0.259,0.063,-0.259,0.063,-0.259,-0.063,-0.259,-0.063,-0.333,-0.063,-0.333,-0.063,-0.333,-0.102,-0.333,-0.102,-0.278,-0.102,-0.278,-0.102,-0.278,-0.145,-0.278,-0.145,-0.352,-0.145,-0.463,-0.145,-0.463,0.102,-0.463,0.102,-0.500,0.102,-0.500,0.102,-0.500,0.145,-0.500,0.145,-0.389,0.145,-0.389,0.145,-0.389,0.102,-0.389,0.102,-0.426,0.102,-0.426,0.102,-0.426,-0.145,-0.426,-0.145,-0.463,-0.145);

// TODOs
// * Tube type: hexagonal, circular
// * Pattern types

float si = .707;

vec3 add(vec3 a, vec3 b)
{
    if(a.y < b.y) return a;
    return b;
}

// float m(vec2 x)
// {
//     return max(x.x,x.y);
// }

// float d210(vec2 x)
// {
//     return min(max(max(max(max(min(max(max(m(abs(vec2(abs(abs(x.x)-.25)-.25, x.y))-vec2(.2)), -m(abs(vec2(x.x+.5, abs(abs(x.y)-.05)-.05))-vec2(.12,.02))), -m(abs(vec2(abs(x.x+.5)-.1, x.y-.05*sign(x.x+.5)))-vec2(.02,.07))), m(abs(vec2(x.x+.5,x.y+.1))-vec2(.08,.04))), -m(abs(vec2(x.x, x.y-.04))-vec2(.02, .08))), -m(abs(vec2(x.x, x.y+.1))-vec2(.02))), -m(abs(vec2(x.x-.5, x.y))-vec2(.08,.12))), -m(abs(vec2(x.x-.5, x.y-.05))-vec2(.12, .07))), m(abs(vec2(x.x-.5, x.y))-vec2(.02, .08)));
// }

float dbullencoolen(vec2 x)
{
    float d;
    
    x *= .7;
    float ret = 1.;

    float n = 0.;
    for(int i=0; i<npts/4; ++i)
    {
        vec2 ptsi = vec2(path[4*i], path[4*i+1]),
            ptsip1 = vec2(path[4*i+2], path[4*i+3]),
            k = x-ptsi, 
            d = ptsip1-ptsi;
        
        float beta = k.x/d.x,
            alpha = d.y*k.x/d.x-k.y;
        
        n += step(.0, beta)*step(beta, 1.)*step(0., alpha);
        ret = min(ret, dline2(x, ptsi, ptsip1));
    }
    
    ret = mix(ret, -ret, mod(n, 2.));
    
    ret /= .7;
    return ret;
}

float dpsycoholika(vec2 x)
{
    float d;
    
    x *= .7;
    float ret = 1.;

    float n = 0.;
    for(int i=0; i<npts1/4; ++i)
    {
        vec2 ptsi = vec2(path1[4*i], path1[4*i+1]),
            ptsip1 = vec2(path1[4*i+2], path1[4*i+3]),
            k = x-ptsi, 
            d = ptsip1-ptsi;
        
        float beta = k.x/d.x,
            alpha = d.y*k.x/d.x-k.y;
        
        n += step(.0, beta)*step(beta, 1.)*step(0., alpha);
        ret = min(ret, dline2(x, ptsi, ptsip1));
    }
    
    ret = mix(ret, -ret, mod(n, 2.));
    
    ret /= .7;
    return ret;
}

// float dhappynewyear(vec2 x)
// {
//     float d;
    
//     x *= .7;
//     float ret = 1.;

//     float n = 0.;
//     for(int i=0; i<npts2/4; ++i)
//     {
//         vec2 ptsi = vec2(path2[4*i], path2[4*i+1]),
//             ptsip1 = vec2(path2[4*i+2], path2[4*i+3]),
//             k = x-ptsi, 
//             d = ptsip1-ptsi;
        
//         float beta = k.x/d.x,
//             alpha = d.y*k.x/d.x-k.y;
        
//         n += step(.0, beta)*step(beta, 1.)*step(0., alpha);
//         ret = min(ret, dline2(x, ptsi, ptsip1));
//     }
    
//     ret = mix(ret, -ret, mod(n, 2.));
    
//     ret /= .7;
//     return ret;
// }

float dorgelsaft(vec2 x)
{
    float d;
    
    x *= .7;
    float ret = 1.;

    float n = 0.;
    for(int i=0; i<npts3/4; ++i)
    {
        vec2 ptsi = vec2(path3[4*i], path3[4*i+1]),
            ptsip1 = vec2(path3[4*i+2], path3[4*i+3]),
            k = x-ptsi, 
            d = ptsip1-ptsi;
        
        float beta = k.x/d.x,
            alpha = d.y*k.x/d.x-k.y;
        
        n += step(.0, beta)*step(beta, 1.)*step(0., alpha);
        ret = min(ret, dline2(x, ptsi, ptsip1));
    }
    
    ret = mix(ret, -ret, mod(n, 2.));
    
    ret /= .7;
    return ret;
}

float dfuckcovid(vec2 x)
{
    float d;
    
    x *= .7;
    float ret = 1.;

    float n = 0.;
    for(int i=0; i<npts4/4; ++i)
    {
        vec2 ptsi = vec2(path4[4*i], path4[4*i+1]),
            ptsip1 = vec2(path4[4*i+2], path4[4*i+3]),
            k = x-ptsi, 
            d = ptsip1-ptsi;
        
        float beta = k.x/d.x,
            alpha = d.y*k.x/d.x-k.y;
        
        n += step(.0, beta)*step(beta, 1.)*step(0., alpha);
        ret = min(ret, dline2(x, ptsi, ptsip1));
    }
    
    ret = mix(ret, -ret, mod(n, 2.));
    
    ret /= .7;
    return ret;
}

float dhubschraubereintopf(vec2 x)
{
    float d;
    
    x *= .7;
    float ret = 1.;

    float n = 0.;
    for(int i=0; i<npts5/4; ++i)
    {
        vec2 ptsi = vec2(path5[4*i], path5[4*i+1]),
            ptsip1 = vec2(path5[4*i+2], path5[4*i+3]),
            k = x-ptsi, 
            d = ptsip1-ptsi;
        
        float beta = k.x/d.x,
            alpha = d.y*k.x/d.x-k.y;
        
        n += step(.0, beta)*step(beta, 1.)*step(0., alpha);
        ret = min(ret, dline2(x, ptsi, ptsip1));
    }
    
    ret = mix(ret, -ret, mod(n, 2.));
    
    ret /= .7;
    return ret;
}

// float dteam210(vec2 x)
// {
//     float d;
    
//     x *= .7;
//     float ret = 1.;

//     float n = 0.;
//     for(int i=0; i<npts6/4; ++i)
//     {
//         vec2 ptsi = vec2(path6[4*i], path6[4*i+1]),
//             ptsip1 = vec2(path6[4*i+2], path6[4*i+3]),
//             k = x-ptsi, 
//             d = ptsip1-ptsi;
        
//         float beta = k.x/d.x,
//             alpha = d.y*k.x/d.x-k.y;
        
//         n += step(.0, beta)*step(beta, 1.)*step(0., alpha);
//         ret = min(ret, dline2(x, ptsi, ptsip1));
//     }
    
//     ret = mix(ret, -ret, mod(n, 2.));
    
//     ret /= .7;
//     return ret;
// }

// Taken from https://www.iquilezles.org/www/articles/smin/smin.htm
// Polynomial smooth min 2 (k=0.1)
float blendPolynomial2(float a, float b, float k)
{
    float h = max(k-abs(a-b), 0.)/k;
    return min(a, b) - h*h*k*.25;
}

float dtetrahedron_wireframe(vec3 x, float a, float da)
{
    vec3 p0 = a*vec3(c.zy,-si),
        p1 = a*vec3(c.xy,-si),
        p2 = a*vec3(c.yx,si),
        p3 = a*vec3(c.yz,si);
    return min(
        min(
            min(
                dline3(x,p0,p1),
                dline3(x,p1,p2)
            ),
            min(
                dline3(x,p2,p3),
                dline3(x,p3,p0)
            )
        ),
        min(
            dline3(x,p1,p3),
            dline3(x,p0,p2)
        )
    ) - da;
}

float rt = 1.,
    rta = 1.,
    ms = 1.;
vec3 scene(vec3 x)
{
    vec3 sdf;
    if(iTime < 0.); // TODO: remove
    else if(iTime < times[0]) // Team210 logo
    {
        // x.xy -= vec2(.4,-.2);
        
        // Box210 inside striped box
        RR = rot3(.4*iTime*vec3(1.1,1.3,1.7));
        vec3 y = RR * x;
        sdf = add(vec3(5.,  dbox210(y, 1.2-.5*hash11(hardBeats+1.32)), 0.), vec3(1., -dbox3(x, 1.1*c.xxx+1.*c.xyy), 0.));
    }
    else if(iTime < times[1]) // Greetings
    {
        sdf = vec3(1., -dbox3(x, 1.1*c.xxx+1.*c.xyy), 0.);
        float bbx = dbox3(x, vec3(.7,.1,.11));
        if(bbx < 1.e-2)
        {
            float d = mod(floor(hardBeats/2.), 2.) == 0. ? dbullencoolen(vec2(1.1,2.4)*(x.xy-.01*c.yx)) + .005:dpsycoholika(vec2(1.1,1.7)*x.xy) + .005;
            sdf = add(sdf, vec3(5., zextrude(x.z, d, .1), 0.));
            sdf = add(sdf, vec3(6., zextrude(x.z, d - .01, .05), 0.));
        }
        else sdf = add(sdf, vec3(6., bbx, 0.));
    }
    else if(iTime < times[2]) // Nippelball with tentacles = corona, fck covid text?
    {
        x.xy -= vec2(.4,-.2);

        float bbx = length(x)-.5,
            cc = .2;
        
        sdf = vec3(1., -dbox3(x, 1.1*c.xxx+1.*c.xyy), 0.);
        
        if(bbx<1.e-2)
        {
            RR = rot3(.4*iTime*vec3(1.1,1.3,1.7));
            x = RR * x;
            vec3 a;
            vec2 ai;
            ms = .32;
            float d = length(x)-ms;
            vec3 y = x;
            for(int i=0; i<4; ++i)
            {
                if(i > 2 && hash11(float(i)+.231 + hardBeats) > .6) break;
                mat3 RRa = rot3(2.*pi*(2.*hash31(float(i+23))-1.));
                y = RRa * y;
                ai = inverseSF(normalize(y), 40., a);
                y -= a*ms*(1.+.05*cc);
                ms *= cc;
                float da = length(y)-ms;
                d = min(d, da);
                rt = da<1.e-4?float(i)+13.:rt;
            }
            sdf = add(sdf, vec3(8.,  d, 0.));
        }
        else sdf = add(sdf, vec3(8., bbx, 0.));
    }
    else if(iTime < times[3]) // Metaballs in cube
    {
        x.xy -= vec2(.4,-.2);

        float bbx = length(x)-.5;

        sdf = vec3(1., -dbox3(x, 1.1*c.xxx+1.*c.xyy), 0.);
        if(bbx < 1.e-2)
        {
            float d = 1.;
            for(int i=0; i<18; ++i)
            {
                RR = rot3(2.*(-.4+.8*hash31(4.*float(i+55)))*iTime*vec3(1.1,1.3,1.7) /*+13.31*hash31(4.*float(i))*/);
                float da = length(RR*x-.15+.3*hash31(4.*float(i+2))) - .01-.1*hash11(4.*float(i+23));
                d = blendPolynomial2(d, da, .05);
            }
            sdf = add(sdf, vec3(9., d, 0.));
        }
        else sdf = add(sdf, vec3(7., bbx, 0.));
    }
    else if(iTime < times[4]) // ribbons
    {
        x.xy -= vec2(.4,-.2);

        sdf = vec3(1., -dbox3(x, 1.1*c.xxx+1.*c.xyy), 0.);

        // Ribbonz
        vec3 xs = c.yxy*x - .1*vec3(cos(3.*x.y-iTime), 0., sin(3.*x.y-iTime));
        vec3 ns = vec3(cos(3.*x.y-iTime), 0., sin(3.*x.y-iTime));
        mat3 m = ortho(ns),
            mt = transpose(m);
        vec3 y = mt * (x - xs);
        y.x = abs(y.x)-.1;
        y.z = abs(y.z)-.2;
        sdf = add(sdf, vec3(9., dbox3(y, vec3(.003, .1, .1)), 0.));

        // Spherez
        float zs = .5;
        vec3 z = vec3(x.x-xs.x, mod(x.y-.3*iTime, zs)-.5*zs, x.z-xs.z);
        float zj = x.y-.3*iTime-z.y;
        sdf = add(sdf, vec3( 10., length(z+xs.xyz*c.xyx-(.4*hash31(zj+12.35)-.2)*c.xyx)-(.3+.2*hash11(zj))*zs, 0.));
    }
    else if(iTime < times[5]) // Polytopes
    {
        x.xy -= vec2(.4,-.2);
        float bbx = length(x)-.5;

        sdf = vec3(1., -dbox3(x, 1.1*c.xxx+1.*c.xyy), 0.);

        if(bbx<1.e-2)
        {
            for(int i=0; i<3; ++i)
            {
                RR = rot3((-1.+2.*hash31(2.+i))*2.*pi+iTime*.3);
                ms = .5+.5*hash11(float(i+6));
                
                float d = fHedron(RR*x-(-.1+.4*hash31(float(4*i+3))), 6,16, .2*ms, true);
                sdf = add(sdf, vec3(9., d, 0.));
                sdf = add(sdf, vec3(4., fHedron(RR*x-(-.1+.4*hash31(float(4*i+3))), 0,6, .1825*ms, true), 0.));

                rt = d<1.e-3?4.*float(i)+13.:rt;
                // if(sdf.y < 1.e-2) rt = float(4*i);
                
            }
        }
    }
    // else if(iTime < 1.e3) // octree cube effect
    // HÄSSLICH WIE SCHEIßE
    // {
    //     x.xy -= vec2(.4,-.2);

    //     sdf = vec3(1., -dbox3(x, 1.1*c.xxx+1.*c.xyy), 0.);

    //     RR = rot3(.4*iTime*vec3(1.1,1.3,1.7));
    //     x = RR * x;

    //     float size = .2,
    //         d = 1.;
    //     vec3 y = x;
    //     for(int i=0; i<4; ++i)
    //     {
    //         vec3 z = mod(y, size)-.5*size,
    //             zj = (y-z),
    //             azj = abs(zj);

    //         if(azj.x < size && azj.y < size && azj.z < size);
    //         else continue;

    //         rt = hash13(1.e2*(zj+133.+12.*float(i)));
    //         if(rt < .2 )
    //         {
    //             // d = -1.;
    //             d = min(d, dbox3(z, .49*size*c.xxx));
    //             rta += rt;
    //             // d = min(d, dbox3(z, 1.201*size*c.xxx));
    //             break;
    //         }

    //         size /= 2.;

    //         y = z;
    //     }
    //     sdf = add(sdf, vec3(11., d, 0.));
    // }

// TODO
// * Orgelsaft
// * Hubschraubereintopf
// * Caleidoskop

    else if(iTime < times[6]) // sanduhr shit
    {
        // x.xy -= vec2(.4,-.2);

        float bbx = length(x)-.5;

        sdf = vec3(1., -dbox3(x, 1.1*c.xxx+1.*c.xyy), 0.);

        if(bbx<1.e-2)
        {
            RR = rot3(c.xxx*2.*pi+iTime*.3);
            sdf = vec3(1., -dbox3(x, 1.1*c.xxx+1.*c.xyy), 0.);

            float i = floor(2.*(.5+.5*lfnoise(.5*nbeats*c.xx))),
                d,
                rm = .3,
                nr = 10.;
            
            for(float r = rm/nr; r <= rm; r += rm/nr)
            {
                vec3 y = rot3(lfnoise((nbeats+r+1335.)*c.xx)*r/rm*pi*c.xxy)*RR*x;
                
                if(lfnoise(.5*nbeats*c.xx+13.23)<0.)
                {
                    if(i<1.)
                        d = dbox3_wireframe(y, .6*r*c.xxx, mix(.05,.1,.5+.5*lfnoise(.5*nbeats*c.xx-13.))*r);
                    else
                        d = dtetrahedron_wireframe(y, .9*r, mix(.025,.05,.5+.5*lfnoise(.5*nbeats*c.xx+13.))*r);
                }
                else
                {
                    if(i<1.)
                        d = dstar(y.xy, .5*r,1.*r, 7.);
                    else if(i<2.)
                        d = (length(y.xy)-.5*r-.5*r*abs(cos(4.*atan(y.y,y.x))))/2.;
                    else
                        d = length(y.xy)-r;

                    d = abs(d)-mix(.075,.475,scale)*rm/nr;
                    d = zextrude(y.z, d, mix(.05,.75,.5+.5*lfnoise(.5*nbeats*c.xx-13.3))*rm/nr);

                }

                if(d-.001 < 1.e-3) rt = r;

                sdf = add(sdf, vec3(12., d-.001, 0.));
            }
        }
        else sdf = add(sdf, vec3(0., bbx, 0.));
    }
    // else if(iTime < 1.e3); // ins gesicht fliegen
    else // Eye Tunnel
    {

        // Tube
        float d = -zextrude(x.z,length(x.xy)-rt*(1.+.2*sin(x.z)), 1.e3);
        sdf = vec3(0., d, 0.);
        
        // Back plane
        sdf = add(sdf, vec3(1., x.z+3., 0.));
        
        // Front plane
        // sdf = add(sdf, vec3(2., abs(x.z)-1.e-3, 0.));

        if(iTime > times[7])
        {
            float sa = smoothstep(0.,1.,x.z);
            x.xy -= sa*.3*vec2(lfnoise(x.zz*.3 + .2*iTime), lfnoise(x.zz*.3+.2*iTime+13.));
    
            float zs = 2.;
            float z = mod(x.z - .4*iTime, zs) - .5*zs,
                zj = x.z - .4*iTime - z;

            float k = 4.+round(8.*hash11(abs(zj))), r = .1, rs = .025;
            float p = atan(x.y,x.x);
            vec3 er = vec3(cos(p), sin(p), 0.),
                ez = c.yyx,
                ep = vec3(-sin(p), cos(p), 0.);
            vec3 xs = r*er + .5*ez + rs*er*cos(k*p-iTime) + rs*ez*sin(k*p-iTime),
                ns = r*ep + rs*vec3(-sin(p)*cos(k*p-iTime)-k*cos(p)*sin(k*p-iTime), cos(p)*cos(k*p-iTime)-k*sin(p)*sin(k*p-iTime), 0.) + rs*ez*k*cos(k*p-iTime);
            mat3 m = ortho(normalize(ns)),
                mt = transpose(m);
            d = length(mt * (vec3(x.xy, z)-xs))-rs;
            // d = dbox3( vec3(.003, .01, .01));
            sdf = add(sdf, vec3(10., d, 0.));

            xs = r*er + .5*ez;
            ns = r*ep;
            m = ortho(normalize(ns));
            mt = transpose(m);
            d = length(mt * (vec3(x.xy, z)-xs))-rs;
            sdf = add(sdf, vec3(9., d, 0.));
        }
    }
    
    return sdf;
}

vec3 palette(float scale)
{
    scale = abs(scale);
    const int N = 4;
    vec3 colors[N] = vec3[N](
        vec3(0.91,0.44,0.32),
        vec3(0.91,0.77,0.42),
        vec3(0.16,0.62,0.56),
        vec3(0.15,0.27,0.33)
    );
    float i = floor(scale),
        ip1 = mod(i + 1., float(N));
    return mix(colors[int(i)], colors[int(ip1)], fract(scale));
}

float sm(in float d)
{
    return smoothstep(1.5/iResolution.y, -1.5/iResolution.y, d);
}

vec3 pattern_horizontal_lines(vec2 uv)
{
    float ps = .5,
        dy = mod(uv.y-.4*iTime, ps)-.5*ps,
        d = abs(dy)-.05;
    return mix(c.yyy, c.xxx, sm(d));
}

vec3 pattern_vertical_lines(vec2 uv)
{
    float ps = .5,
        dx = mod(uv.x-.4*iTime, ps)-.5*ps,
        d = abs(dx)-.05;
    return mix(c.yyy, c.xxx, sm(d));
}

vec3 pattern_circles(vec2 uv)
{
    float ps = .5,
        r = length(uv),
        dr = mod(r-.4*iTime, ps)-.5*ps,
        d = abs(dr)-.05;
    return mix(c.yyy, c.xxx, sm(d));
}

vec3 pattern_hexagon(vec2 uv)
{
    uv -= .1*iTime;
    float ys = pi/15.;
    vec4 v = hexCoords(uv/ys)*ys;
    
    return mix(c.yyy, c.xxx, sm(dregularpolygon(mat2(cos(pi/6.), sin(pi/6.), -sin(pi/6.), cos(pi/6.))*v.xy, 1.4*ys*clamp(.4+lfnoise(4.*(mod(v.zw,2.*pi)+13.+.3*iTime)),.1,1.), 6.)));
}

vec3 pattern_truchet_hex_standard(vec2 uv)
{
    uv -= .1*iTime;
    float ys = pi/15.;
    vec4 v = hexCoords(uv/ys)*ys;
    v.z = mod(v.z,2.*pi);
    
    vec2 r = hash22(1.e1*(v.zw+13.));
    
    float phi = -pi/6.+ 2.*pi/3.*floor(r.y*2.99),
        d;
    mat2 rp = mat2(cos(phi), sin(phi), -sin(phi), cos(phi)),
        ra = mat2(cos(pi/6.), sin(pi/6.), -sin(pi/6.), cos(pi/6.)),
        rat = transpose(ra);
    if(r.x <= .7)
    {
        vec2 dt1 = dtspline2(rp*v.xy, .5*ys*c.yz, .01*c.yy, .5*ys*c.yx),
            dt2 = dtspline2(rp*v.xy, .5*ys*rat*rat*c.yz, .01*c.yy, .5*ys*ra*ra*c.yx),
            dt3 = dtspline2(rp*v.xy, .5*ys*ra*ra*ra*ra*c.yz, .01*c.yy, .5*ys*ra*ra*c.yz);
        d = min(min(dt1.x,dt2.x),dt3.x)-.01;
    }
    else if(r.x <= .9)
    {
        vec2 dt1 = dtspline2(v.xy, .5*ys*rat*c.yz, .01*c.yy, .5*ys*ra*c.yz),
            dt2 = dtspline2(v.xy, .5*ys*rat*c.yx, .01*c.yy, .5*ys*rat*rat*rat*c.yx),
            dt3 = dtspline2(v.xy, .5*ys*ra*ra*ra*c.yx, .01*c.yy, .5*ys*ra*c.yx);
        d = min(min(dt1.x,dt2.x),dt3.x)-.01;
    }
    else// if(r.x <= .75)
    {
        vec2 dt1 = dtline2(rp*v.xy, .5*ys*c.yz, .5*ys*c.yx),
            dt2 = dtline2(rp*v.xy, .5*ra*ra*ys*c.yz, .5*ys*ra*ra*c.yx),
            dt3 = dtline2(rp*v.xy, .5*rat*rat*ys*c.yz, .5*ys*rat*rat*c.yx);
        d = min(min(dt1.x,dt2.x),dt3.x)-.01;
    }
    
    return mix(c.yyy, c.xxx, sm(d));
}

vec3 pattern_truchet_hex_edgy(vec2 uv)
{
    uv -= .1*iTime;
    float ys = pi/14.;
    vec4 v = hexCoords(uv/ys)*ys;
    v.z = mod(v.z,2.*pi);
    
    vec2 r = hash22(1.e1*(v.zw+13.));
    float phi = -pi/6.+ 2.*pi/3.*floor(r.y*2.99), 
        rs = .2*ys;
    mat2 rp = mat2(cos(phi), sin(phi), -sin(phi), cos(phi)),
        ra = mat2(cos(pi/6.), sin(pi/6.), -sin(pi/6.), cos(pi/6.)),
        rat = transpose(ra);

    vec2 dt1 = dtline2_unclamped(rp*v.xy, .5*ys*c.yz, .5*ys*c.yx),
        dt2 = dtline2_unclamped(rp*v.xy, .5*ys*rat*rat*c.yz, .5*ys*ra*ra*c.yx),
        dt3 = dtline2_unclamped(rp*v.xy, .5*ys*ra*ra*ra*ra*c.yz, .5*ys*ra*ra*c.yz);
    float d = min(min(dt1.x-rs,dt2.x-rs*cos(pi/3.)),dt3.x-rs*cos(pi/3.));
    return mix(c.yyy, c.xxx, sm(-d));
}

vec2 as;
bool ray(inout vec3 col, out vec3 x, inout float d, vec3 dir, out vec3 s, vec3 o, vec3 l, out vec3 n, int num)
{
    for(int i=0; i<num; ++i)
    {
        x = o + d * dir;
        s = scene(x);
        
        if(s.y < 1.e-4)
        {
            // Blinn-Phong Illumination
            float dx = 5.e-5;
            n = normalize(vec3(
                scene(x+dx*c.xyy).y, 
                scene(x+dx*c.yxy).y, 
                scene(x+dx*c.yyx).y
            )-s.y);
            
            vec3 ads = vec3(.5,.4,.3);
            float smoothness = .1;
            float r0 = .9;

            // x.xy -= vec2(.4,-.2);
            
            if(s.x == 0.) // Tube
            {
                float r = hash11(hardBeats+13.),
                    rp1 = hash11(hardBeats+1.+13.);
                vec2 uv = vec2(rt * atan(x.y,x.x), x.z);
                if(r < .33)
                    col = pattern_truchet_hex_edgy(uv);
                else if(r < .66)
                    col = pattern_truchet_hex_standard(uv);
                else
                    col = pattern_hexagon(uv);

                vec3 c1;
                if(rp1 < .33)
                    c1 = pattern_truchet_hex_edgy(uv);
                else if(rp1 < .66)
                    c1 = pattern_truchet_hex_standard(uv);
                else
                    c1 = pattern_hexagon(uv);

                col = mix(col, c1, smoothstep(0., .5*spb, iTime-hardBeats*spb+.5));

                r0 = .1;
                ads = vec3(.4,.2, .1);
            }
            else if(s.x == 1.) // Back plane
            {
                float s = hash11(hardBeats);
                if(s < .33)
                    col = pattern_horizontal_lines(x.xy);
                else if(s < .66)
                    col = pattern_vertical_lines(x.xy);
                else
                    col = pattern_circles(x.xy);
                col = mix(col, .5*col, hash11(hardBeats+ .31));
                r0 = .1;
                ads = vec3(.8,.4, .1);
            }
            else if(s.x == 2.) // Front plane
            {
                vec2 uv = x.xy;
                col = pattern_vertical_lines(uv);
                r0 = .1;
                ads = vec3(.8,.4, .1);
            }
            else if(s.x == 3.) // Polyhedra color part
            {
                col = mix(vec3(.1,.6,.05), .2*c.xxx, hash11(rt));
                r0 = .1;
                ads = vec3(.8,.4, .1);
            }
            else if(s.x == 4.) // Polyhedra white part
            {
                col = .2*c.xxx;
                r0 = .1;
                ads = vec3(.8,.4, .1);
            }
            else if(s.x == 5.) // Logo210
            {
                // x.xy -= vec2(.4,-.2);

                ads = vec3(.4,.4,.1);
                r0 = .1;
                vec3 y = RR * x;
                col = mix(vec3(.9,.3,.1), .2*c.xxx, sm(-dbox3(1.2*y, .25*(1.1-.5*hash11(hardBeats+1.32))*c.xxx)/1.2));
            }
            else if(s.x == 6.) // Bullencoolen
            {
                ads = vec3(.4,.4,.1);
                r0 = .1;
                col = mix(/*vec3(.9,.1,.3)*/c.xxx, .2*c.xxx, sm(abs(x.z)-.045));
            }
            else if(s.x == 7.) // Metaballs
            {
                ads = vec3(.4,.4,.1);
                r0 = .1;
                // col = vec3(.9,.1,.3);
                col = mix(c.xxx, .2*c.xxx, .5+.5*lfnoise(5.*x.xy));
            }
            else if(s.x == 8.) // Nippelball
            {
                ads = vec3(.4,.4,.1);
                r0 = .1;
                // col = vec3(.9,.1,.3);
                col = mix(vec3(.9,.5,.3), .2*c.xxx, hash31(rt));
            }
            else if(s.x == 9.) // Ribbons
            {
                ads = vec3(.4,.4,.1);
                r0 = .1;
                // col = vec3(.9,.1,.3);
                col = vec3(.9,.5,.3);
            }
            else if(s.x == 10.) // Spherez
            {
                ads = vec3(.4,.4,.1);
                r0 = .1;
                // col = vec3(.9,.1,.3);
                col = .2*c.xxx;//vec3(.5,.9,.3);
            }
            else if(s.x == 11.)
            {
                ads = vec3(.4,.4,.1);
                r0 = .1;
                // col = vec3(.9,.1,.3);
                col = mix(vec3(.2,.9,.3), .2*c.xxx, step(.5,hash11(rta)));
            }
            else if(s.x == 12.)
            {
                ads = vec3(.4,.4,.1);
                r0 = .1;
                // col = vec3(.9,.1,.3);
                col = mix(vec3(.5,.9,.3), .2*c.xxx, hash11(rt));
            }
            
            // Schlick
            ads.z += r0 + (1. - r0) * pow(clamp((1. - dot(n, -dir)), 0., 1.), 5.) * smoothness;

            col = ads.x * col
                + ads.y * col * max(dot(normalize(l-x),n),0.)
                + ads.z * col * pow(max(dot(reflect(normalize(l-x),n),dir),0.),2.);
                    
            if(s.x == -1.) col = c.yyy;
                    
            return true;
        }
        //d += s.y;
        //d += min(abs(s.y), 3.e-3);
        d += s.y<5.e-1?min(s.y,6.e-3):min(s.y,1.e-2);//min(s.y,1.e-3);
        // d += s.y<5.e-1?min(s.y,6.e-3):min(s.y, 1.e-2);//min(s.y,1.e-3);
    }
    return false;
}

void main()
{
    stepTime = mod(iTime+.5*spb, spb)-.5*spb;
    nbeats = (iTime-stepTime+.5*spb)/spb + smoothstep(-.2*spb, .2*spb, stepTime);
    scale = smoothstep(-.3*spb, 0., stepTime)*smoothstep(.3*spb, 0., stepTime);
    hardBeats = round((iTime-stepTime)/spb);
    
    vec2 uv = gl_FragCoord.xy/iResolution.xy,
        unit = 1./iResolution.xy;
    ivec2 index = ivec2(gl_FragCoord.xy);
    
    vec2 uv1 = (gl_FragCoord.xy-.5*iResolution.xy)/iResolution.y;

    if(iPass == 0)
    {
        vec3 
            o = c.yyx;

        // if(iTime > times[6])
        {
            o += .3*vec3(lfnoise(c.xx*.3 + .2*iTime), lfnoise(c.xx*.3 + .2*iTime + 13.),0.);
        }

        vec3 t = c.yyy,
            col = c.yyy,
            c1,
            x,
            x1,
            n,
            r = c.xyy,
            dir = normalize(t + uv1.x * r + uv1.y * cross(r,normalize(t-o))-o),
            l = .03*c.zyx,
            s,
            s1;
        float d0 = 0.,
            d;
        
        // Center flare
        //col = mix(col, c.xxx, smoothstep(.02,0.,length(uv1)));
        
        //as = asphere(o,dir, .55);
        //if(as.x < 1.e1)
        {
            // Material ray
            if(ray(col, x, d0, dir, s, o, l, n, 1350))
            {
                // if(s.x == 2. && all(equal(col, c.yyy)))
                // {
                //     d0 += 3.e-3;
                //     ray(col, x, d0, dir, s, o, l, n, 1460);
                // }
                
                // Ambient occlusion
                float d = 1.e-2,
                    ao = 1.,
                    am = 150.;
                
                for(float i=0.; i<=am; i+=1.)
                {
                    d += .01;
                    ao *= 1.-max(0.,(d-scene(x + d*n).y)/d/am);
                }
                
                col *= ao;
            }
        }
        
        // Fog
        //col = mix(col, vec3(1.00,0.65,0.37), smoothstep(6., 12., d0));
        
        // Gamma
        //col += col*col + col*col*col;
        //col *= .75;

        // Text
        vec2 z = uv1.xy - vec2(-.4,.3);
        
        if(iTime < times[1]);
        else if(iTime < times[2])
        {
            float bbx = dbox2(z, vec2(2.28, .1));
            col = mix(col, mix(col, c.xxx, .5), sm(bbx));
            col = mix(col, c.yyy, sm(dfuckcovid(3.*vec2(.8,1.3)*z)));
        }
        else if(iTime < times[3])
        {
            float bbx = dbox2(z, vec2(2.28, .1));
            col = mix(col, mix(col, c.xxx, .5), sm(bbx));
            col = mix(col, c.yyy, sm(dorgelsaft(vec2(2.5, 3.)*z)));
            // col = mix(col, c.xxx, sm(abs(bbx)-.001));
        }
        else if(iTime < times[4]);
        // {
        //     float bbx = dbox2(z.yx, vec2(2.28, .1));
        //     col = mix(col, mix(col, c.xxx, .5), sm(bbx));
        //     col = mix(col, c.yyy, sm(dteam210(3.*vec2(.8,1.3)*z.yx)));
        // }
        else if(iTime < times[5])
        {
            float bbx = dbox2(z, vec2(2.28, .1));
            col = mix(col, mix(col, c.xxx, .5), sm(bbx));
            col = mix(col, c.yyy, sm(dhubschraubereintopf(3.*vec2(.5,1.2)*(z-.2*c.xy))));
        }
        
        col = hsv2rgb(rgb2hsv(col)*vec3(lfnoise(2.*nbeats*c.xx),1.,1.));
        col = mix(col, 1.5*col, scale);

        // Fade from and to black
        col *= smoothstep(0., 1., iTime) * smoothstep(130., 128., iTime); 

        // scene transitions
        for(int i=0; i<ntimes; ++i)
        {
            col *= smoothstep(0., -.5, iTime-times[i]) + smoothstep(0., .5, iTime-times[i]);
        }

        // stripe
        // col = mix(col, mix(col, c.xxx, .3), sm(abs(uv.x-uv.y+.1)-.3));
        
        //out_color = vec4(clamp(col,0.,1.),1.);
        
        //col = mix(col, 2.*col, clamp(.5-length(x),0.,1.));

        // col = mix(col, c.xyy, sm(dhappynewyear(vec2(1.,1.3)*uv1)));
        
        out_color = mix(texture(iChannel0, uv), vec4(clamp(col,0.,1.),1.), .5);
    }
    else
    {
        // SSAA
        vec3 col = c.yyy;
        float bound = sqrt(fsaa)-1.;
        for(float i = -.5*bound; i<=.5*bound; i+=1.)
            for(float j=-.5*bound; j<=.5*bound; j+=1.)
                col += texture(iChannel0, uv+vec2(i,j)*2./max(bound, 1.)*unit).xyz;
        col /= fsaa;
        out_color = vec4(col, 1.);
        
        
        //unit = 2./iResolution.xy;
        
    //*
        // edge glow
        //unit *= 1.5;
        
        vec4 col11 = texture(iChannel0, uv - unit),
            col13 = texture(iChannel0, uv + unit*c.xz),
            col31 = texture(iChannel0, uv + unit*c.zx),
            col33 = texture(iChannel0, uv + unit),
            x = col33 -col11 -3.* texture(iChannel0, uv + unit*c.yz) -col13 + col31 + 3.*texture(iChannel0, uv + unit*c.yx),
            y = col33 -col11 -3.* texture(iChannel0, uv + unit*c.zy) -col31 + col13 + 3.*texture(iChannel0, uv + unit*c.xy);
        out_color = vec4(col + 1.*(abs(y.rgb) + abs(x.rgb)).rgb,1.);
    //*/  

        //out_color = out_color + out_color*out_color + out_color*out_color*out_color;
        // Vignette
        //uv *=  1. - uv.yx;
        //out_color *= pow(uv.x*uv.y * 15., .2);
        
        // Grain
            out_color.rgb += .04*fract(sin(dot(uv+13.36, vec2(12.9898, 4.1414))) * 43758.5453)*c.xxx;
            out_color.rgb = clamp(out_color.rgb,0.,1.);
    }
}
