/* Psycoholika
 * Copyright (C) 2021  Alexander Kraus <nr4@z10.info>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

const vec3 c = vec3(1.,0.,-1.);
const float pi = acos(-1.),
    PHI = 1.618,
    bpm = .5*148.,
    spb = 60./bpm;
float scale,
    nbeats,
    stepTime,
    hardBeats;
mat3 RR;
vec3 data[20] = vec3[20](
        vec3(0, PHI, 1), // Dodecahedron
        vec3(0, -PHI, 1),
        vec3(1, 0, PHI),
        vec3(-1, 0, PHI),
        vec3(PHI, 1, 0),
        vec3(-PHI, 1, 0), // Icosahedron, Octahedron
        vec3(1, 1, 1),
        vec3(-1, 1, 1),
        vec3(1, -1, 1),
        vec3(1, 1, -1),
        vec3(0, 1, PHI+1.),
        vec3(0, -1, PHI+1.),
        vec3(PHI+1., 0, 1),
        vec3(-PHI-1., 0, 1),
        vec3(1, PHI+1., 0),
        vec3(-1, PHI+1., 0),
        vec3(sqrt(2.), sqrt(6.), 1.), // Tetrahedron
        vec3(-sqrt(8.), 0., 1.),
        vec3(sqrt(2.), -sqrt(6.), 1.),
        vec3(0., 0., -3.)
    );
const float fsaa = 144.;

// End times
const int ntimes = 8;
const float times[ntimes] = float[ntimes](
    15.*spb, // Cube 210
    30.*spb, // Bullencoolen
    48.*spb, // Nippelbrokkoli
    60.*spb, // Metaballs
    75.*spb, // Ribbons
    90.*spb, // Polytopes
    110.*spb, // Mod shit
    120.*spb // Empty tunnelmod
);

// Created by David Hoskins and licensed under MIT.
// See https://www.shadertoy.com/view/4djSRW.
// vec2->float hash function
float hash12(vec2 p)
{
	vec3 p3  = fract(vec3(p.xyx) * .1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return fract((p3.x + p3.y) * p3.z);
}

// Created by David Hoskins and licensed under MIT.
// See https://www.shadertoy.com/view/4djSRW.
// vec3->float hash function
float hash13(vec3 p3)
{
	p3  = fract(p3 * .1031);
    p3 += dot(p3, p3.zyx + 31.32);
    return fract((p3.x + p3.y) * p3.z);
}

// Created by David Hoskins and licensed under MIT.
// See https://www.shadertoy.com/view/4djSRW.
// vec2->vec2 hash function
vec2 hash22(vec2 p)
{
	vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yzx+33.33);
    return fract((p3.xx+p3.yz)*p3.zy);
}

// Created by David Hoskins and licensed under MIT.
// See https://www.shadertoy.com/view/4djSRW.
// float->float hash function
float hash11(float p)
{
    p = fract(p * .1031);
    p *= p + 33.33;
    p *= p + p;
    return fract(p);
}

// Created by David Hoskins and licensed under MIT.
// See https://www.shadertoy.com/view/4djSRW.
// float->vec3 hash function
vec3 hash31(float p)
{
   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));
   p3 += dot(p3, p3.yzx+33.33);
   return fract((p3.xxy+p3.yzz)*p3.zyx); 
}

// Low-Frequency noise (value-type)
float lfnoise(vec2 t)
{
    vec2 i = floor(t);
    t = fract(t);
    t = smoothstep(c.yy, c.xx, t);
    vec2 v1 = vec2(hash12(i), hash12(i+c.xy)), 
        v2 = vec2(hash12(i+c.yx), hash12(i+c.xx));
    v1 = c.zz+2.*mix(v1, v2, t.y);
    return mix(v1.x, v1.y, t.x);
}

// Convert RGB to HSV colors
vec3 rgb2hsv(vec3 cc)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(cc.bg, K.wz), vec4(cc.gb, K.xy), step(cc.b, cc.g));
    vec4 q = mix(vec4(p.xyw, cc.r), vec4(cc.r, p.yzx), step(p.x, cc.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

// Convert HSV to RGB colors
vec3 hsv2rgb(vec3 cc)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(cc.xxx + K.xyz) * 6.0 - K.www);
    return cc.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), cc.y);
}

// Rotation in R3
mat3 rot3(in vec3 p)
{
    return mat3(c.xyyy, cos(p.x), sin(p.x), 0., -sin(p.x), cos(p.x))
        *mat3(cos(p.y), 0., -sin(p.y), c.yxy, sin(p.y), 0., cos(p.y))
        *mat3(cos(p.z), -sin(p.z), 0., sin(p.z), cos(p.z), c.yyyx);
}

// Distance functions

// 2D box distance
float dbox2(vec2 x, vec2 b)
{
    vec2 da = abs(x)-b;
    return length(max(da,c.yy)) + min(max(da.x,da.y),0.0);
}

// 3D box distance
float dbox3(vec3 x, vec3 b)
{
	vec3 da = abs(x) - b;
	return length(max(da,0.0))
			+ min(max(da.x,max(da.y,da.z)),0.0);
}

// Regular polygon distance
float dregularpolygon(in vec2 x, in float R, in float N)
{
    float p = atan(x.y,x.x),
        k = pi/N,
    	dp = mod(p+pi, 2.*k);
    
    vec2 p1 = R*c.xy,
        p2 = R*vec2(cos(2.*k),sin(2.*k)),
        dpp = p2-p1,
        n = normalize(p2-p1).yx*c.xz, 
        xp = length(x)*vec2(cos(dp), sin(dp));
    float t = dot(xp-p1,dpp)/dot(dpp,dpp);
    float r = dot(xp-p1,n);
    if(t < 0.)
        return sign(r)*length(xp-p1);
    else if(t > 1.)
        return sign(r)*length(xp-p2);
    else
	    return r;
}

// Regular star distance
float dstar(in vec2 x, in float r1, in float r2, in float N)
{
    N *= 2.;
    float p = atan(x.y,x.x),
        k = pi/N,
    	dp = mod(p+pi, 2.*k),
    	parity = mod(round((p+pi-dp)*.5/k), 2.),
        dk = k,
        dkp = mix(dk,-dk,parity);
    
    vec2 p1 = r1*vec2(cos(k-dkp),sin(k-dkp)),
        p2 = r2*vec2(cos(k+dkp),sin(k+dkp)),
        dpp = p2-p1,
        n = normalize(p2-p1).yx*c.xz, 
        xp = length(x)*vec2(cos(dp), sin(dp));
    float t = dot(xp-p1,dpp)/dot(dpp,dpp);
    float r = mix(1.,-1.,parity)*dot(xp-p1,n);
    if(t < 0.)
        return sign(r)*length(xp-p1);
    else if(t > 1.)
        return sign(r)*length(xp-p2);
    else
	    return r;
}

// Extrude sdf along axis
float zextrude(float z, float d2d, float h)
{
    vec2 w = vec2(d2d, abs(z)-0.5*h);
    return min(max(w.x,w.y),0.0) + length(max(w,0.0));
}

// Inspired here, modified for sizecoding and removed loads of
// unneccessary code: https://www.shadertoy.com/view/WdlGRf
// The paper they reference is very useful for understanding the regular polyhedron distances
// fHedron(0,6): Dodecahedron
// fHedron(6,10): Octahedron
// fHedron(6,16): Icosahedron
float fHedron(vec3 p, int offset, int len, float r, bool symmetric)
{
    float d = 0.,
        da;
    for(int i=offset; i<len; ++i)
    {
        da = dot(p, normalize(data[i]));
        d = max(d, symmetric?abs(da):da);
    }
    return d - r;
}

// From BackwardsCap: https://www.shadertoy.com/view/tsV3Rd
// thanks to BigWIngs/The Art Of Code's videos on hex tiling and truchet patterns
vec4 hexCoords(vec2 p)
{
    vec2 s = vec2(1,1.73);
    vec2 hs = s*.5,
         c1 = mod(p,s)-hs,
         c2 = mod(p-hs,s)-hs;
    vec2 hc= dot(c1, c1)<dot(c2,c2)?c1:c2;
    return vec4(hc, p-hc);
}

// Determine zeros of k.x*x^2+k.y*x+k.z
vec2 quadratic_zeros(vec3 k)
{
    if(k.x == 0.) return -k.z/k.y*c.xx;
    float d = k.y*k.y-4.*k.x*k.z;
    if(d<0.) return vec2(1.e4);
    return (c.xz*sqrt(d)-k.y)/(2.*k.x);
}

// Determine zeros of k.x*x^3+k.y*x^2+k.z*x+k.w
vec3 cubic_zeros(vec4 k)
{
    if(k.x == 0.) return quadratic_zeros(k.yzw).xyy;
    
    // Depress
    vec3 ai = k.yzw/k.x;
    
    //discriminant and helpers
    float tau = ai.x/3., 
        p = ai.y-tau*ai.x, 
        q = -tau*(tau*tau+p)+ai.z, 
        dis = q*q/4.+p*p*p/27.;
        
    //triple real root
    if(dis > 0.) {
        vec2 ki = -.5*q*c.xx+sqrt(dis)*c.xz, 
            ui = sign(ki)*pow(abs(ki), c.xx/3.);
        return vec3(ui.x+ui.y-tau);
    }
    
    //three distinct real roots
    float fac = sqrt(-4./3.*p), 
        arg = acos(-.5*q*sqrt(-27./p/p/p))/3.;
    return c.zxz*fac*cos(arg*c.xxx+c*pi/3.)-tau;
}

// 2D Point on a spline
vec2 xspline2(vec2 x, float t, vec2 p0, vec2 p1, vec2 p2)
{
    return mix(mix(p0,p1,t),mix(p1,p2,t),t);
}

// 2D Distance to a point on a spline
float dspline2(vec2 x, float t, vec2 p0, vec2 p1, vec2 p2)
{
    return length(x - xspline2(x, t, p0, p1, p2));
}

// 2D Normal in a point on a spline
vec2 nspline2(vec2 x, float t, vec2 p0, vec2 p1, vec2 p2)
{
    return normalize(mix(p1-p0, p2-p1, t));
}

// Returns vec2(dmin, tmin).
// 2D spline parameter of the point with minimum distance on the spline and sdf
vec2 dtspline2(vec2 x, vec2 p0, vec2 p1, vec2 p2)
{
    vec2 E0 = x-p0, F0 = p2-2.*p1+p0, G0 = p1-p0;
    vec3 E = clamp(cubic_zeros(vec4(dot(F0,F0), 3.*dot(G0,F0), 2.*dot(G0,G0)-dot(E0,F0), -dot(E0,G0))),0.,1.),
        F = vec3(dspline2(x,E.x,p0,p1,p2),dspline2(x,E.y,p0,p1,p2),dspline2(x,E.z,p0,p1,p2));
    return F.x < F.y && F.x < F.z
        ? vec2(F.x, E.x)
        : F.y < F.x && F.y < F.z
            ? vec2(F.y, E.y)
            : vec2(F.z, E.z);
}

// 2D line nearest parameter
float tline2(vec2 x, vec2 p1, vec2 p2)
{
    vec2 da = p2-p1;
    return clamp(dot(x-p1, da)/dot(da,da),0.,1.);
}

// 2D line distance
float dline2(vec2 x, vec2 p1, vec2 p2)
{
    return length(x-mix(p1, p2, tline2(x,p1,p2)));
}

vec2 dtline2(vec2 x, vec2 p1, vec2 p2)
{
    vec2 da = p2-p1,
        result;
    result.y = clamp(dot(x-p1, da)/dot(da,da),0.,1.);
    result.x = length(x-mix(p1, p2, result.y));
    return result;
}

vec2 dtline2_unclamped(vec2 x, vec2 p1, vec2 p2)
{
    vec2 da = p2-p1,
        result;
    result.y = dot(x-p1, da)/dot(da,da);
    result.x = length(x-mix(p1, p2, result.y));
    return result;
}

float dbox210(vec3 x, float size)
{
    x /= size;
    
    float d = 1.;
    
    // Big red box
    d = min(d, dbox3(x, .2*c.xxx));
    
    // Holes
    
    // 2 upper bar
    d = max(d, -dbox3(x-.1*c.xyy, vec3(.02,.3,.12)));
    
    // 2 right bar
    d = max(d, -dbox3(x-.05*c.xyy-.1*c.yyx, vec3(.07,.3,.02)));
    
    // 2 mid bar
    d = max(d, -dbox3(x, vec3(.02,.3,.1)));
    
    // 2 left bar
    d = max(d, -dbox3(x+.05*c.xyy+.1*c.yyx, vec3(.07,.3,.02)));
    
    // 2 dot
    d = max(d, -dbox3(x+.1*c.xyy-.1*c.yyx, vec3(.02,.3,.02)));
    
    // 1 bar
    d = max(d, -dbox3(x+.04*c.yyx, vec3(.3,.02,.08)));
    
    // 1 dot
    d = max(d, -dbox3(x-.1*c.yyx, vec3(.3,.02,.02)));
    
    // 0 big stripes
    vec3 y = vec3(x.x, abs(x.y), x.z);
    d = max(d, -dbox3(y-.05*c.yxy, vec3(.1,.03,.3)));

	// 0 small stripes
    d = max(d, -dbox3(y-.1*c.yxy-.06*c.xyy, vec3(.08,.021,.3)));

    // 0 upper/lower stripes
    vec3 z = vec3(abs(x.x), x.yz);
	d = max(d, -dbox3(z-.119*c.xyy, vec3(.021,.08,.3)));
    
    return d * size;
}

// Originally from https://www.shadertoy.com/view/lllXz4
// Modified by fizzer to put out the vector q.
// Modified by NR4 to reduce size.
// Inverse spherical fibonacci mapping tech by las/mercury
vec2 inverseSF( vec3 p, float n, out vec3 outq ) 
{
    float m = 1. - 1./n,
        phi = min(atan(p.y, p.x), pi), cosTheta = p.z,
        k  = max(2., floor( log(n * pi * sqrt(5.) * (1.0 - cosTheta*cosTheta))/ log(PHI+1.))),
        Fk = pow(PHI, k)/sqrt(5.0),
        d,j;
    vec2  F  = vec2( round(Fk), round(Fk * PHI) ),
        ka = 2.*F/n,
        kb = 2.*pi*( fract((F+1.0)*PHI) - (PHI-1.) ),
        c;    
    mat2 iB = mat2( ka.y, -ka.x, kb.y, -kb.x ) / (ka.y*kb.x - ka.x*kb.y);
    
    c = floor( iB * vec2(phi, cosTheta - m));
    d = 8.;
    j = 0.;
    for( int s=0; s<4; s++ ) 
    {
        vec2 uv = vec2( float(s-2*(s/2)), float(s/2) );
        
        float i = round(dot(F, uv + c)),
            phi = 2.0*pi*fract(i*PHI),
            cosTheta = m - 2.0*i/n,
            sinTheta = sqrt(1.0 - cosTheta*cosTheta);
        vec3 q = vec3( cos(phi)*sinTheta, sin(phi)*sinTheta, cosTheta );
        float squaredDistance = dot(q-p, q-p);
        
        if (squaredDistance < d) 
        {
            outq = q;
            d = squaredDistance;
            j = i;
        }
    }
    return vec2( j, sqrt(d) );
}

// Compute an orthonormal system from a single vector in R^3
mat3 ortho(vec3 d)
{
    vec3 a = normalize(
        d.x != 0. 
            ? vec3(-d.y/d.x,1.,0.)
            : d.y != 0.
                ? vec3(1.,-d.x/d.y,0.)
                : vec3(1.,0.,-d.x/d.z)
    );
    return mat3(d, a, cross(d,a));
}

float dbox3_wireframe(vec3 x, vec3 b, float db)
{
    float d = dbox3(x,b); 
    d = max(d, -dbox3(x, b+c.zzx*db));
    d = max(d, -dbox3(x, b+c.xzz*db));
    return max(d, -dbox3(x, b+c.zxz*db));
}

// 3D line nearest parameter
float tline3(vec3 x, vec3 p1, vec3 p2)
{
    vec3 da = p2-p1;
    return clamp(dot(x-p1, da)/dot(da,da),0.,1.);
}

// 3D line distance
float dline3(vec3 x, vec3 p1, vec3 p2)
{
    return length(x-mix(p1, p2, tline3(x,p1,p2)));
}

const int npts = 664;
const float path[npts] = float[npts](0.474,-0.145,0.474,-0.062,0.474,-0.062,0.500,-0.062,0.500,-0.062,0.500,-0.145,0.500,-0.145,0.474,-0.145,0.385,-0.145,0.385,0.104,0.385,0.104,0.449,0.104,0.449,0.104,0.449,0.063,0.449,0.063,0.462,0.063,0.462,0.063,0.462,-0.145,0.462,-0.145,0.436,-0.145,0.436,-0.145,0.436,0.060,0.436,0.060,0.423,0.060,0.423,0.060,0.423,0.019,0.423,0.019,0.411,0.019,0.411,0.019,0.411,-0.145,0.411,-0.145,0.385,-0.145,0.321,0.060,0.321,-0.020,0.321,-0.020,0.346,-0.020,0.346,-0.020,0.346,0.060,0.346,0.060,0.321,0.060,0.308,-0.145,0.308,-0.104,0.308,-0.104,0.295,-0.104,0.295,-0.104,0.295,0.063,0.295,0.063,0.308,0.063,0.308,0.063,0.308,0.104,0.308,0.104,0.359,0.104,0.359,0.104,0.359,0.063,0.359,0.063,0.372,0.063,0.372,0.063,0.372,-0.063,0.372,-0.063,0.321,-0.063,0.321,-0.063,0.321,-0.102,0.321,-0.102,0.359,-0.102,0.359,-0.102,0.359,-0.145,0.359,-0.145,0.308,-0.145,0.256,-0.145,0.256,0.102,0.256,0.102,0.244,0.102,0.244,0.102,0.244,0.145,0.244,0.145,0.282,0.145,0.282,0.145,0.282,-0.145,0.282,-0.145,0.256,-0.145,0.180,-0.102,0.205,-0.102,0.205,-0.102,0.205,0.060,0.205,0.060,0.180,0.060,0.180,0.060,0.180,-0.102,0.167,-0.145,0.167,-0.104,0.167,-0.104,0.154,-0.104,0.154,-0.104,0.154,0.063,0.154,0.063,0.167,0.063,0.167,0.063,0.167,0.104,0.167,0.104,0.218,0.104,0.218,0.104,0.218,0.063,0.218,0.063,0.231,0.063,0.231,0.063,0.231,-0.104,0.231,-0.104,0.218,-0.104,0.218,-0.104,0.218,-0.145,0.218,-0.145,0.167,-0.145,0.090,-0.102,0.115,-0.102,0.115,-0.102,0.115,0.060,0.115,0.060,0.090,0.060,0.090,0.060,0.090,-0.102,0.077,-0.145,0.077,-0.104,0.077,-0.104,0.064,-0.104,0.064,-0.104,0.064,0.063,0.064,0.063,0.077,0.063,0.077,0.063,0.077,0.104,0.077,0.104,0.128,0.104,0.128,0.104,0.128,0.063,0.128,0.063,0.141,0.063,0.141,0.063,0.141,-0.104,0.141,-0.104,0.128,-0.104,0.128,-0.104,0.128,-0.145,0.128,-0.145,0.077,-0.145,-0.013,-0.145,-0.013,-0.104,-0.013,-0.104,-0.026,-0.104,-0.026,-0.104,-0.026,0.063,-0.026,0.063,-0.013,0.063,-0.013,0.063,-0.013,0.104,-0.013,0.104,0.039,0.104,0.039,0.104,0.039,0.063,0.039,0.063,0.051,0.063,0.051,0.063,0.051,0.019,0.051,0.019,0.025,0.019,0.025,0.019,0.025,0.060,0.025,0.060,0.000,0.060,0.000,0.060,0.000,-0.102,0.000,-0.102,0.025,-0.102,0.025,-0.102,0.025,-0.061,0.025,-0.061,0.051,-0.061,0.051,-0.061,0.051,-0.104,0.051,-0.104,0.039,-0.104,0.039,-0.104,0.039,-0.145,0.039,-0.145,-0.013,-0.145,-0.115,-0.145,-0.115,0.104,-0.115,0.104,-0.051,0.104,-0.051,0.104,-0.051,0.063,-0.051,0.063,-0.038,0.063,-0.038,0.063,-0.038,-0.145,-0.038,-0.145,-0.064,-0.145,-0.064,-0.145,-0.064,0.060,-0.064,0.060,-0.077,0.060,-0.077,0.060,-0.077,0.019,-0.077,0.019,-0.089,0.019,-0.089,0.019,-0.089,-0.145,-0.089,-0.145,-0.115,-0.145,-0.179,0.060,-0.179,-0.020,-0.179,-0.020,-0.154,-0.020,-0.154,-0.020,-0.154,0.060,-0.154,0.060,-0.179,0.060,-0.192,-0.145,-0.192,-0.104,-0.192,-0.104,-0.205,-0.104,-0.205,-0.104,-0.205,0.063,-0.205,0.063,-0.192,0.063,-0.192,0.063,-0.192,0.104,-0.192,0.104,-0.141,0.104,-0.141,0.104,-0.141,0.063,-0.141,0.063,-0.128,0.063,-0.128,0.063,-0.128,-0.063,-0.128,-0.063,-0.179,-0.063,-0.179,-0.063,-0.179,-0.102,-0.179,-0.102,-0.141,-0.102,-0.141,-0.102,-0.141,-0.145,-0.141,-0.145,-0.192,-0.145,-0.244,-0.145,-0.244,0.102,-0.244,0.102,-0.256,0.102,-0.256,0.102,-0.256,0.145,-0.256,0.145,-0.218,0.145,-0.218,0.145,-0.218,-0.145,-0.218,-0.145,-0.244,-0.145,-0.295,-0.145,-0.295,0.102,-0.295,0.102,-0.308,0.102,-0.308,0.102,-0.308,0.145,-0.308,0.145,-0.269,0.145,-0.269,0.145,-0.269,-0.145,-0.269,-0.145,-0.295,-0.145,-0.385,-0.145,-0.385,-0.104,-0.385,-0.104,-0.397,-0.104,-0.397,-0.104,-0.397,0.104,-0.397,0.104,-0.371,0.104,-0.371,0.104,-0.371,-0.102,-0.371,-0.102,-0.359,-0.102,-0.359,-0.102,-0.359,-0.061,-0.359,-0.061,-0.347,-0.061,-0.347,-0.061,-0.347,0.104,-0.347,0.104,-0.321,0.104,-0.321,0.104,-0.321,-0.145,-0.321,-0.145,-0.385,-0.145,-0.474,0.102,-0.474,0.022,-0.474,0.022,-0.436,0.022,-0.436,0.022,-0.436,0.102,-0.436,0.102,-0.474,0.102,-0.423,-0.104,-0.423,-0.145,-0.423,-0.145,-0.500,-0.145,-0.500,-0.145,-0.500,0.145,-0.500,0.145,-0.423,0.145,-0.423,0.145,-0.423,0.104,-0.423,0.104,-0.410,0.104,-0.410,0.104,-0.410,0.019,-0.410,0.019,-0.436,0.019,-0.436,0.019,-0.436,-0.019,-0.436,-0.019,-0.410,-0.019,-0.410,-0.019,-0.410,-0.104,-0.410,-0.104,-0.423,-0.104,-0.474,-0.102,-0.436,-0.102,-0.436,-0.102,-0.436,-0.022,-0.436,-0.022,-0.474,-0.022,-0.474,-0.022,-0.474,-0.102);

const int npts1 = 736;
const float path1[npts1] = float[npts1](0.473,-0.087,0.473,-0.029,0.473,-0.029,0.500,-0.029,0.500,-0.029,0.500,-0.087,0.500,-0.087,0.473,-0.087,0.406,-0.001,0.406,-0.057,0.406,-0.057,0.432,-0.057,0.432,-0.057,0.432,-0.001,0.432,-0.001,0.406,-0.001,0.378,-0.058,0.378,0.001,0.378,0.001,0.392,0.001,0.392,0.001,0.392,0.030,0.392,0.030,0.432,0.030,0.432,0.030,0.432,0.057,0.432,0.057,0.392,0.057,0.392,0.057,0.392,0.087,0.392,0.087,0.446,0.087,0.446,0.087,0.446,0.058,0.446,0.058,0.459,0.058,0.459,0.058,0.459,-0.058,0.459,-0.058,0.446,-0.058,0.446,-0.058,0.446,-0.087,0.446,-0.087,0.392,-0.087,0.392,-0.087,0.392,-0.058,0.392,-0.058,0.378,-0.058,0.284,-0.087,0.284,0.116,0.284,0.116,0.311,0.116,0.311,0.116,0.311,0.001,0.311,0.001,0.324,0.001,0.324,0.001,0.324,0.030,0.324,0.030,0.337,0.030,0.337,0.030,0.337,0.087,0.337,0.087,0.365,0.087,0.365,0.087,0.365,0.028,0.365,0.028,0.351,0.028,0.351,0.028,0.351,-0.001,0.351,-0.001,0.338,-0.001,0.338,-0.001,0.338,-0.028,0.338,-0.028,0.351,-0.028,0.351,-0.028,0.351,-0.057,0.351,-0.057,0.365,-0.057,0.365,-0.057,0.365,-0.087,0.365,-0.087,0.337,-0.087,0.337,-0.087,0.337,-0.058,0.337,-0.058,0.324,-0.058,0.324,-0.058,0.324,-0.029,0.324,-0.029,0.311,-0.029,0.311,-0.029,0.311,-0.087,0.311,-0.087,0.284,-0.087,0.243,0.115,0.243,0.145,0.243,0.145,0.270,0.145,0.270,0.145,0.270,0.115,0.270,0.115,0.243,0.115,0.243,-0.087,0.243,0.057,0.243,0.057,0.230,0.057,0.230,0.057,0.230,0.087,0.230,0.087,0.270,0.087,0.270,0.087,0.270,-0.087,0.270,-0.087,0.243,-0.087,0.189,-0.087,0.189,0.086,0.189,0.086,0.176,0.086,0.176,0.086,0.176,0.116,0.176,0.116,0.216,0.116,0.216,0.116,0.216,-0.087,0.216,-0.087,0.189,-0.087,0.109,-0.057,0.135,-0.057,0.135,-0.057,0.135,0.057,0.135,0.057,0.109,0.057,0.109,0.057,0.109,-0.057,0.094,-0.087,0.094,-0.058,0.094,-0.058,0.081,-0.058,0.081,-0.058,0.081,0.058,0.081,0.058,0.094,0.058,0.094,0.058,0.094,0.087,0.094,0.087,0.149,0.087,0.149,0.087,0.149,0.058,0.149,0.058,0.162,0.058,0.162,0.058,0.162,-0.058,0.162,-0.058,0.149,-0.058,0.149,-0.058,0.149,-0.087,0.149,-0.087,0.094,-0.087,-0.014,-0.087,-0.014,0.116,-0.014,0.116,0.014,0.116,0.014,0.116,0.014,0.087,0.014,0.087,0.054,0.087,0.054,0.087,0.054,0.058,0.054,0.058,0.068,0.058,0.068,0.058,0.068,-0.087,0.068,-0.087,0.040,-0.087,0.040,-0.087,0.040,0.057,0.040,0.057,0.027,0.057,0.027,0.057,0.027,0.028,0.027,0.028,0.014,0.028,0.014,0.028,0.014,-0.087,0.014,-0.087,-0.014,-0.087,-0.081,-0.057,-0.054,-0.057,-0.054,-0.057,-0.054,0.057,-0.054,0.057,-0.081,0.057,-0.081,0.057,-0.081,-0.057,-0.095,-0.087,-0.095,-0.058,-0.095,-0.058,-0.108,-0.058,-0.108,-0.058,-0.108,0.058,-0.108,0.058,-0.095,0.058,-0.095,0.058,-0.095,0.087,-0.095,0.087,-0.040,0.087,-0.040,0.087,-0.040,0.058,-0.040,0.058,-0.027,0.058,-0.027,0.058,-0.027,-0.058,-0.027,-0.058,-0.040,-0.058,-0.040,-0.058,-0.040,-0.087,-0.040,-0.087,-0.095,-0.087,-0.189,-0.087,-0.189,-0.058,-0.189,-0.058,-0.203,-0.058,-0.203,-0.058,-0.203,0.058,-0.203,0.058,-0.189,0.058,-0.189,0.058,-0.189,0.087,-0.189,0.087,-0.135,0.087,-0.135,0.087,-0.135,0.058,-0.135,0.058,-0.122,0.058,-0.122,0.058,-0.122,0.028,-0.122,0.028,-0.149,0.028,-0.149,0.028,-0.149,0.057,-0.149,0.057,-0.175,0.057,-0.175,0.057,-0.175,-0.057,-0.175,-0.057,-0.149,-0.057,-0.149,-0.057,-0.149,-0.028,-0.149,-0.028,-0.122,-0.028,-0.122,-0.028,-0.122,-0.058,-0.122,-0.058,-0.135,-0.058,-0.135,-0.058,-0.135,-0.087,-0.135,-0.087,-0.189,-0.087,-0.284,-0.145,-0.284,-0.115,-0.284,-0.115,-0.244,-0.115,-0.244,-0.115,-0.244,-0.087,-0.244,-0.087,-0.284,-0.087,-0.284,-0.087,-0.284,-0.059,-0.284,-0.059,-0.297,-0.059,-0.297,-0.059,-0.297,0.087,-0.297,0.087,-0.270,0.087,-0.270,0.087,-0.270,-0.057,-0.270,-0.057,-0.244,-0.057,-0.244,-0.057,-0.244,0.087,-0.244,0.087,-0.216,0.087,-0.216,0.087,-0.216,-0.116,-0.216,-0.116,-0.230,-0.116,-0.230,-0.116,-0.230,-0.145,-0.230,-0.145,-0.284,-0.145,-0.392,-0.058,-0.392,-0.028,-0.392,-0.028,-0.364,-0.028,-0.364,-0.028,-0.364,-0.057,-0.364,-0.057,-0.338,-0.057,-0.338,-0.057,-0.338,-0.001,-0.338,-0.001,-0.379,-0.001,-0.379,-0.001,-0.379,0.028,-0.379,0.028,-0.392,0.028,-0.392,0.028,-0.392,0.058,-0.392,0.058,-0.379,0.058,-0.379,0.058,-0.379,0.087,-0.379,0.087,-0.324,0.087,-0.324,0.087,-0.324,0.057,-0.324,0.057,-0.364,0.057,-0.364,0.057,-0.364,0.030,-0.364,0.030,-0.324,0.030,-0.324,0.030,-0.324,0.001,-0.324,0.001,-0.311,0.001,-0.311,0.001,-0.311,-0.058,-0.311,-0.058,-0.324,-0.058,-0.324,-0.058,-0.324,-0.087,-0.324,-0.087,-0.379,-0.087,-0.379,-0.087,-0.379,-0.058,-0.379,-0.058,-0.392,-0.058,-0.472,0.086,-0.472,0.001,-0.472,0.001,-0.433,0.001,-0.433,0.001,-0.433,0.086,-0.433,0.086,-0.472,0.086,-0.500,-0.087,-0.500,0.116,-0.500,0.116,-0.419,0.116,-0.419,0.116,-0.419,0.087,-0.419,0.087,-0.405,0.087,-0.405,0.087,-0.405,-0.001,-0.405,-0.001,-0.419,-0.001,-0.419,-0.001,-0.419,-0.029,-0.419,-0.029,-0.472,-0.029,-0.472,-0.029,-0.472,-0.087,-0.472,-0.087,-0.500,-0.087);

const int npts3 = 584;
const float path3[npts3] = float[npts3](0.467,-0.081,0.467,-0.016,0.467,-0.016,0.500,-0.016,0.500,-0.016,0.500,-0.081,0.500,-0.081,0.467,-0.081,0.401,-0.081,0.401,-0.049,0.401,-0.049,0.385,-0.049,0.385,-0.049,0.385,0.079,0.385,0.079,0.369,0.079,0.369,0.079,0.369,0.113,0.369,0.113,0.385,0.113,0.385,0.113,0.385,0.145,0.385,0.145,0.418,0.145,0.418,0.145,0.418,0.113,0.418,0.113,0.435,0.113,0.435,0.113,0.435,0.079,0.435,0.079,0.418,0.079,0.418,0.079,0.418,-0.047,0.418,-0.047,0.451,-0.047,0.451,-0.047,0.451,-0.081,0.451,-0.081,0.401,-0.081,0.287,-0.081,0.287,0.047,0.287,0.047,0.270,0.047,0.270,0.047,0.270,0.081,0.270,0.081,0.287,0.081,0.287,0.081,0.287,0.113,0.287,0.113,0.303,0.113,0.303,0.113,0.303,0.145,0.303,0.145,0.352,0.145,0.352,0.145,0.352,0.111,0.352,0.111,0.320,0.111,0.320,0.111,0.320,0.081,0.320,0.081,0.336,0.081,0.336,0.081,0.336,0.047,0.336,0.047,0.320,0.047,0.320,0.047,0.320,-0.081,0.320,-0.081,0.287,-0.081,0.189,0.015,0.189,-0.047,0.189,-0.047,0.221,-0.047,0.221,-0.047,0.221,0.015,0.221,0.015,0.189,0.015,0.156,-0.049,0.156,0.017,0.156,0.017,0.172,0.017,0.172,0.017,0.172,0.049,0.172,0.049,0.221,0.049,0.221,0.049,0.221,0.079,0.221,0.079,0.172,0.079,0.172,0.079,0.172,0.113,0.172,0.113,0.238,0.113,0.238,0.113,0.238,0.081,0.238,0.081,0.254,0.081,0.254,0.081,0.254,-0.049,0.254,-0.049,0.238,-0.049,0.238,-0.049,0.238,-0.081,0.238,-0.081,0.172,-0.081,0.172,-0.081,0.172,-0.049,0.172,-0.049,0.156,-0.049,0.041,-0.049,0.041,-0.015,0.041,-0.015,0.074,-0.015,0.074,-0.015,0.074,-0.047,0.074,-0.047,0.106,-0.047,0.106,-0.047,0.106,0.015,0.106,0.015,0.057,0.015,0.057,0.015,0.057,0.047,0.057,0.047,0.041,0.047,0.041,0.047,0.041,0.081,0.041,0.081,0.057,0.081,0.057,0.081,0.057,0.113,0.057,0.113,0.123,0.113,0.123,0.113,0.123,0.079,0.123,0.079,0.074,0.079,0.074,0.079,0.074,0.049,0.074,0.049,0.123,0.049,0.123,0.049,0.123,0.017,0.123,0.017,0.139,0.017,0.139,0.017,0.139,-0.049,0.139,-0.049,0.123,-0.049,0.123,-0.049,0.123,-0.081,0.123,-0.081,0.057,-0.081,0.057,-0.081,0.057,-0.049,0.057,-0.049,0.041,-0.049,-0.009,-0.081,-0.009,0.111,-0.009,0.111,-0.025,0.111,-0.025,0.111,-0.025,0.145,-0.025,0.145,0.025,0.145,0.025,0.145,0.025,-0.081,0.025,-0.081,-0.009,-0.081,-0.106,0.079,-0.106,0.017,-0.106,0.017,-0.074,0.017,-0.074,0.017,-0.074,0.079,-0.074,0.079,-0.106,0.079,-0.123,-0.081,-0.123,-0.049,-0.123,-0.049,-0.139,-0.049,-0.139,-0.049,-0.139,0.081,-0.139,0.081,-0.123,0.081,-0.123,0.081,-0.123,0.113,-0.123,0.113,-0.057,0.113,-0.057,0.113,-0.057,0.081,-0.057,0.081,-0.041,0.081,-0.041,0.081,-0.041,-0.017,-0.041,-0.017,-0.106,-0.017,-0.106,-0.017,-0.106,-0.047,-0.106,-0.047,-0.057,-0.047,-0.057,-0.047,-0.057,-0.081,-0.057,-0.081,-0.123,-0.081,-0.221,-0.047,-0.189,-0.047,-0.189,-0.047,-0.189,0.079,-0.189,0.079,-0.221,0.079,-0.221,0.079,-0.221,-0.047,-0.238,-0.145,-0.238,-0.111,-0.238,-0.111,-0.189,-0.111,-0.189,-0.111,-0.189,-0.081,-0.189,-0.081,-0.238,-0.081,-0.238,-0.081,-0.238,-0.049,-0.238,-0.049,-0.254,-0.049,-0.254,-0.049,-0.254,0.081,-0.254,0.081,-0.238,0.081,-0.238,0.081,-0.238,0.113,-0.238,0.113,-0.156,0.113,-0.156,0.113,-0.156,-0.113,-0.156,-0.113,-0.172,-0.113,-0.172,-0.113,-0.172,-0.145,-0.172,-0.145,-0.238,-0.145,-0.369,-0.081,-0.369,0.113,-0.369,0.113,-0.270,0.113,-0.270,0.113,-0.270,0.079,-0.270,0.079,-0.319,0.079,-0.319,0.079,-0.319,0.047,-0.319,0.047,-0.336,0.047,-0.336,0.047,-0.336,-0.081,-0.336,-0.081,-0.369,-0.081,-0.467,-0.047,-0.419,-0.047,-0.419,-0.047,-0.419,0.111,-0.419,0.111,-0.467,0.111,-0.467,0.111,-0.467,-0.047,-0.484,-0.081,-0.484,-0.049,-0.484,-0.049,-0.500,-0.049,-0.500,-0.049,-0.500,0.113,-0.500,0.113,-0.484,0.113,-0.484,0.113,-0.484,0.145,-0.484,0.145,-0.401,0.145,-0.401,0.145,-0.401,0.113,-0.401,0.113,-0.385,0.113,-0.385,0.113,-0.385,-0.049,-0.385,-0.049,-0.401,-0.049,-0.401,-0.049,-0.401,-0.081,-0.401,-0.081,-0.484,-0.081);

const int npts4 = 616;
const float path4[npts4] = float[npts4](0.472,-0.145,0.472,-0.072,0.472,-0.072,0.500,-0.072,0.500,-0.072,0.500,-0.145,0.500,-0.145,0.472,-0.145,0.402,-0.107,0.429,-0.107,0.429,-0.107,0.429,0.035,0.429,0.035,0.402,0.035,0.402,0.035,0.402,-0.107,0.387,-0.145,0.387,-0.109,0.387,-0.109,0.373,-0.109,0.373,-0.109,0.373,0.037,0.373,0.037,0.387,0.037,0.387,0.037,0.387,0.073,0.387,0.073,0.429,0.073,0.429,0.073,0.429,0.109,0.429,0.109,0.458,0.109,0.458,0.109,0.458,-0.145,0.458,-0.145,0.387,-0.145,0.331,0.107,0.331,0.145,0.331,0.145,0.359,0.145,0.359,0.145,0.359,0.107,0.359,0.107,0.331,0.107,0.331,-0.145,0.331,0.035,0.331,0.035,0.317,0.035,0.317,0.035,0.317,0.073,0.317,0.073,0.359,0.073,0.359,0.073,0.359,-0.145,0.359,-0.145,0.331,-0.145,0.246,-0.145,0.246,-0.109,0.246,-0.109,0.232,-0.109,0.232,-0.109,0.232,-0.073,0.232,-0.073,0.218,-0.073,0.218,-0.073,0.218,0.072,0.218,0.072,0.247,0.072,0.247,0.072,0.247,-0.071,0.247,-0.071,0.274,-0.071,0.274,-0.071,0.274,0.072,0.274,0.072,0.303,0.072,0.303,0.072,0.303,-0.073,0.303,-0.073,0.289,-0.073,0.289,-0.073,0.289,-0.109,0.289,-0.109,0.275,-0.109,0.275,-0.109,0.275,-0.145,0.275,-0.145,0.246,-0.145,0.148,-0.107,0.176,-0.107,0.176,-0.107,0.176,0.035,0.176,0.035,0.148,0.035,0.148,0.035,0.148,-0.107,0.134,-0.145,0.134,-0.109,0.134,-0.109,0.120,-0.109,0.120,-0.109,0.120,0.037,0.120,0.037,0.134,0.037,0.134,0.037,0.134,0.072,0.134,0.072,0.190,0.072,0.190,0.072,0.190,0.037,0.190,0.037,0.204,0.037,0.204,0.037,0.204,-0.109,0.204,-0.109,0.190,-0.109,0.190,-0.109,0.190,-0.145,0.190,-0.145,0.134,-0.145,0.021,-0.109,0.021,-0.073,0.021,-0.073,0.007,-0.073,0.007,-0.073,0.007,0.037,0.007,0.037,0.021,0.037,0.021,0.037,0.021,0.073,0.021,0.073,0.035,0.073,0.035,0.073,0.035,0.109,0.035,0.109,0.092,0.109,0.092,0.109,0.092,0.073,0.092,0.073,0.106,0.073,0.106,0.073,0.106,0.035,0.106,0.035,0.077,0.035,0.077,0.035,0.077,0.071,0.077,0.071,0.050,0.071,0.050,0.071,0.050,0.035,0.050,0.035,0.036,0.035,0.036,0.035,0.036,-0.071,0.036,-0.071,0.050,-0.071,0.050,-0.071,0.050,-0.107,0.050,-0.107,0.077,-0.107,0.077,-0.107,0.077,-0.071,0.077,-0.071,0.106,-0.071,0.106,-0.071,0.106,-0.109,0.106,-0.109,0.092,-0.109,0.092,-0.109,0.092,-0.145,0.092,-0.145,0.035,-0.145,0.035,-0.145,0.035,-0.109,0.035,-0.109,0.021,-0.109,-0.190,-0.145,-0.190,0.109,-0.190,0.109,-0.162,0.109,-0.162,0.109,-0.162,-0.035,-0.162,-0.035,-0.148,-0.035,-0.148,-0.035,-0.148,0.001,-0.148,0.001,-0.134,0.001,-0.134,0.001,-0.134,0.073,-0.134,0.073,-0.106,0.073,-0.106,0.073,-0.106,-0.001,-0.106,-0.001,-0.120,-0.001,-0.120,-0.001,-0.120,-0.037,-0.120,-0.037,-0.134,-0.037,-0.134,-0.037,-0.134,-0.071,-0.134,-0.071,-0.120,-0.071,-0.120,-0.071,-0.120,-0.107,-0.120,-0.107,-0.106,-0.107,-0.106,-0.107,-0.106,-0.145,-0.106,-0.145,-0.134,-0.145,-0.134,-0.145,-0.134,-0.109,-0.134,-0.109,-0.148,-0.109,-0.148,-0.109,-0.148,-0.073,-0.148,-0.073,-0.162,-0.073,-0.162,-0.073,-0.162,-0.145,-0.162,-0.145,-0.190,-0.145,-0.275,-0.145,-0.275,-0.109,-0.275,-0.109,-0.289,-0.109,-0.289,-0.109,-0.289,0.037,-0.289,0.037,-0.275,0.037,-0.275,0.037,-0.275,0.072,-0.275,0.072,-0.218,0.072,-0.218,0.072,-0.218,0.037,-0.218,0.037,-0.204,0.037,-0.204,0.037,-0.204,-0.001,-0.204,-0.001,-0.233,-0.001,-0.233,-0.001,-0.233,0.035,-0.233,0.035,-0.260,0.035,-0.260,0.035,-0.260,-0.107,-0.260,-0.107,-0.233,-0.107,-0.233,-0.107,-0.233,-0.071,-0.233,-0.071,-0.204,-0.071,-0.204,-0.071,-0.204,-0.109,-0.204,-0.109,-0.218,-0.109,-0.218,-0.109,-0.218,-0.145,-0.218,-0.145,-0.275,-0.145,-0.373,-0.145,-0.373,-0.109,-0.373,-0.109,-0.387,-0.109,-0.387,-0.109,-0.387,0.072,-0.387,0.072,-0.359,0.072,-0.359,0.072,-0.359,-0.107,-0.359,-0.107,-0.345,-0.107,-0.345,-0.107,-0.345,-0.071,-0.345,-0.071,-0.331,-0.071,-0.331,-0.071,-0.331,0.072,-0.331,0.072,-0.303,0.072,-0.303,0.072,-0.303,-0.145,-0.303,-0.145,-0.373,-0.145,-0.500,-0.145,-0.500,0.109,-0.500,0.109,-0.401,0.109,-0.401,0.109,-0.401,0.071,-0.401,0.071,-0.471,0.071,-0.471,0.071,-0.471,0.001,-0.471,0.001,-0.415,0.001,-0.415,0.001,-0.415,-0.037,-0.415,-0.037,-0.471,-0.037,-0.471,-0.037,-0.471,-0.145,-0.471,-0.145,-0.500,-0.145);

const int npts5 = 1128;
const float path5[npts5] = float[npts5](0.485,-0.087,0.485,-0.029,0.485,-0.029,0.500,-0.029,0.500,-0.029,0.500,-0.087,0.500,-0.087,0.485,-0.087,0.446,-0.087,0.446,0.028,0.446,0.028,0.439,0.028,0.439,0.028,0.439,0.058,0.439,0.058,0.446,0.058,0.446,0.058,0.446,0.087,0.446,0.087,0.454,0.087,0.454,0.087,0.454,0.116,0.454,0.116,0.477,0.116,0.477,0.116,0.477,0.086,0.477,0.086,0.462,0.086,0.462,0.086,0.462,0.058,0.462,0.058,0.470,0.058,0.470,0.058,0.470,0.028,0.470,0.028,0.462,0.028,0.462,0.028,0.462,-0.087,0.462,-0.087,0.446,-0.087,0.401,0.057,0.401,-0.057,0.401,-0.057,0.416,-0.057,0.416,-0.057,0.416,0.057,0.416,0.057,0.401,0.057,0.385,-0.145,0.385,0.087,0.385,0.087,0.424,0.087,0.424,0.087,0.424,0.058,0.424,0.058,0.431,0.058,0.431,0.058,0.431,-0.059,0.431,-0.059,0.424,-0.059,0.424,-0.059,0.424,-0.087,0.424,-0.087,0.401,-0.087,0.401,-0.087,0.401,-0.145,0.401,-0.145,0.385,-0.145,0.348,-0.057,0.362,-0.057,0.362,-0.057,0.362,0.057,0.362,0.057,0.348,0.057,0.348,0.057,0.348,-0.057,0.340,-0.087,0.340,-0.058,0.340,-0.058,0.332,-0.058,0.332,-0.058,0.332,0.058,0.332,0.058,0.340,0.058,0.340,0.058,0.340,0.087,0.340,0.087,0.370,0.087,0.370,0.087,0.370,0.058,0.370,0.058,0.378,0.058,0.378,0.058,0.378,-0.058,0.378,-0.058,0.370,-0.058,0.370,-0.058,0.370,-0.087,0.370,-0.087,0.340,-0.087,0.301,-0.087,0.301,-0.058,0.301,-0.058,0.294,-0.058,0.294,-0.058,0.294,0.057,0.294,0.057,0.286,0.057,0.286,0.057,0.286,0.087,0.286,0.087,0.294,0.087,0.294,0.087,0.294,0.116,0.294,0.116,0.309,0.116,0.309,0.116,0.309,0.087,0.309,0.087,0.317,0.087,0.317,0.087,0.317,0.057,0.317,0.057,0.309,0.057,0.309,0.057,0.309,-0.057,0.309,-0.057,0.324,-0.057,0.324,-0.057,0.324,-0.087,0.324,-0.087,0.301,-0.087,0.233,-0.087,0.233,0.087,0.233,0.087,0.271,0.087,0.271,0.087,0.271,0.058,0.271,0.058,0.279,0.058,0.279,0.058,0.279,-0.087,0.279,-0.087,0.263,-0.087,0.263,-0.087,0.263,0.057,0.263,0.057,0.256,0.057,0.256,0.057,0.256,0.028,0.256,0.028,0.248,0.028,0.248,0.028,0.248,-0.087,0.248,-0.087,0.233,-0.087,0.210,0.115,0.210,0.145,0.210,0.145,0.225,0.145,0.225,0.145,0.225,0.115,0.225,0.115,0.210,0.115,0.210,-0.087,0.210,0.057,0.210,0.057,0.202,0.057,0.202,0.057,0.202,0.087,0.202,0.087,0.225,0.087,0.225,0.087,0.225,-0.087,0.225,-0.087,0.210,-0.087,0.164,0.057,0.164,0.001,0.164,0.001,0.179,0.001,0.179,0.001,0.179,0.057,0.179,0.057,0.164,0.057,0.156,-0.087,0.156,-0.058,0.156,-0.058,0.149,-0.058,0.149,-0.058,0.149,0.058,0.149,0.058,0.156,0.058,0.156,0.058,0.156,0.087,0.156,0.087,0.187,0.087,0.187,0.087,0.187,0.058,0.187,0.058,0.195,0.058,0.195,0.058,0.195,-0.030,0.195,-0.030,0.164,-0.030,0.164,-0.030,0.164,-0.057,0.164,-0.057,0.187,-0.057,0.187,-0.057,0.187,-0.087,0.187,-0.087,0.156,-0.087,0.095,-0.087,0.095,0.087,0.095,0.087,0.141,0.087,0.141,0.087,0.141,0.057,0.141,0.057,0.118,0.057,0.118,0.057,0.118,0.028,0.118,0.028,0.111,0.028,0.111,0.028,0.111,-0.087,0.111,-0.087,0.095,-0.087,0.057,0.057,0.057,0.001,0.057,0.001,0.072,0.001,0.072,0.001,0.072,0.057,0.072,0.057,0.057,0.057,0.050,-0.087,0.050,-0.058,0.050,-0.058,0.042,-0.058,0.042,-0.058,0.042,0.058,0.042,0.058,0.050,0.058,0.050,0.058,0.050,0.087,0.050,0.087,0.080,0.087,0.080,0.087,0.080,0.058,0.080,0.058,0.088,0.058,0.088,0.058,0.088,-0.030,0.088,-0.030,0.057,-0.030,0.057,-0.030,0.057,-0.057,0.057,-0.057,0.080,-0.057,0.080,-0.057,0.080,-0.087,0.080,-0.087,0.050,-0.087,0.027,-0.058,0.027,-0.087,0.027,-0.087,-0.011,-0.087,-0.011,-0.087,-0.011,0.116,-0.011,0.116,0.004,0.116,0.004,0.116,0.004,0.087,0.004,0.087,0.027,0.087,0.027,0.087,0.027,0.058,0.027,0.058,0.034,0.058,0.034,0.058,0.034,-0.058,0.034,-0.058,0.027,-0.058,0.004,-0.057,0.019,-0.057,0.019,-0.057,0.019,0.057,0.019,0.057,0.004,0.057,0.004,0.057,0.004,-0.057,-0.057,-0.087,-0.057,-0.058,-0.057,-0.058,-0.065,-0.058,-0.065,-0.058,-0.065,0.087,-0.065,0.087,-0.049,0.087,-0.049,0.087,-0.049,-0.057,-0.049,-0.057,-0.042,-0.057,-0.042,-0.057,-0.042,-0.028,-0.042,-0.028,-0.035,-0.028,-0.035,-0.028,-0.035,0.087,-0.035,0.087,-0.019,0.087,-0.019,0.087,-0.019,-0.087,-0.019,-0.087,-0.057,-0.087,-0.103,-0.001,-0.103,-0.057,-0.103,-0.057,-0.088,-0.057,-0.088,-0.057,-0.088,-0.001,-0.088,-0.001,-0.103,-0.001,-0.118,-0.058,-0.118,0.001,-0.118,0.001,-0.111,0.001,-0.111,0.001,-0.111,0.030,-0.111,0.030,-0.088,0.030,-0.088,0.030,-0.088,0.057,-0.088,0.057,-0.111,0.057,-0.111,0.057,-0.111,0.087,-0.111,0.087,-0.080,0.087,-0.080,0.087,-0.080,0.058,-0.080,0.058,-0.073,0.058,-0.073,0.058,-0.073,-0.058,-0.073,-0.058,-0.080,-0.058,-0.080,-0.058,-0.080,-0.087,-0.080,-0.087,-0.111,-0.087,-0.111,-0.087,-0.111,-0.058,-0.111,-0.058,-0.118,-0.058,-0.172,-0.087,-0.172,0.087,-0.172,0.087,-0.126,0.087,-0.126,0.087,-0.126,0.057,-0.126,0.057,-0.149,0.057,-0.149,0.057,-0.149,0.028,-0.149,0.028,-0.156,0.028,-0.156,0.028,-0.156,-0.087,-0.156,-0.087,-0.172,-0.087,-0.225,-0.087,-0.225,0.116,-0.225,0.116,-0.210,0.116,-0.210,0.116,-0.210,0.087,-0.210,0.087,-0.187,0.087,-0.187,0.087,-0.187,0.058,-0.187,0.058,-0.179,0.058,-0.179,0.058,-0.179,-0.087,-0.179,-0.087,-0.195,-0.087,-0.195,-0.087,-0.195,0.057,-0.195,0.057,-0.202,0.057,-0.202,0.057,-0.202,0.028,-0.202,0.028,-0.210,0.028,-0.210,0.028,-0.210,-0.087,-0.210,-0.087,-0.225,-0.087,-0.271,-0.087,-0.271,-0.058,-0.271,-0.058,-0.279,-0.058,-0.279,-0.058,-0.279,0.058,-0.279,0.058,-0.271,0.058,-0.271,0.058,-0.271,0.087,-0.271,0.087,-0.240,0.087,-0.240,0.087,-0.240,0.058,-0.240,0.058,-0.233,0.058,-0.233,0.058,-0.233,0.028,-0.233,0.028,-0.248,0.028,-0.248,0.028,-0.248,0.057,-0.248,0.057,-0.263,0.057,-0.263,0.057,-0.263,-0.057,-0.263,-0.057,-0.248,-0.057,-0.248,-0.057,-0.248,-0.028,-0.248,-0.028,-0.233,-0.028,-0.233,-0.028,-0.233,-0.058,-0.233,-0.058,-0.240,-0.058,-0.240,-0.058,-0.240,-0.087,-0.240,-0.087,-0.271,-0.087,-0.332,-0.058,-0.332,-0.028,-0.332,-0.028,-0.317,-0.028,-0.317,-0.028,-0.317,-0.057,-0.317,-0.057,-0.302,-0.057,-0.302,-0.057,-0.302,-0.001,-0.302,-0.001,-0.325,-0.001,-0.325,-0.001,-0.325,0.028,-0.325,0.028,-0.332,0.028,-0.332,0.028,-0.332,0.058,-0.332,0.058,-0.325,0.058,-0.325,0.058,-0.325,0.087,-0.325,0.087,-0.294,0.087,-0.294,0.087,-0.294,0.057,-0.294,0.057,-0.317,0.057,-0.317,0.057,-0.317,0.030,-0.317,0.030,-0.294,0.030,-0.294,0.030,-0.294,0.001,-0.294,0.001,-0.286,0.001,-0.286,0.001,-0.286,-0.058,-0.286,-0.058,-0.294,-0.058,-0.294,-0.058,-0.294,-0.087,-0.294,-0.087,-0.325,-0.087,-0.325,-0.087,-0.325,-0.058,-0.325,-0.058,-0.332,-0.058,-0.347,-0.058,-0.347,-0.087,-0.347,-0.087,-0.385,-0.087,-0.385,-0.087,-0.385,0.116,-0.385,0.116,-0.370,0.116,-0.370,0.116,-0.370,0.087,-0.370,0.087,-0.347,0.087,-0.347,0.087,-0.347,0.058,-0.347,0.058,-0.340,0.058,-0.340,0.058,-0.340,-0.058,-0.340,-0.058,-0.347,-0.058,-0.370,-0.057,-0.355,-0.057,-0.355,-0.057,-0.355,0.057,-0.355,0.057,-0.370,0.057,-0.370,0.057,-0.370,-0.057,-0.431,-0.087,-0.431,-0.058,-0.431,-0.058,-0.439,-0.058,-0.439,-0.058,-0.439,0.087,-0.439,0.087,-0.423,0.087,-0.423,0.087,-0.423,-0.057,-0.423,-0.057,-0.416,-0.057,-0.416,-0.057,-0.416,-0.028,-0.416,-0.028,-0.409,-0.028,-0.409,-0.028,-0.409,0.087,-0.409,0.087,-0.393,0.087,-0.393,0.087,-0.393,-0.087,-0.393,-0.087,-0.431,-0.087,-0.500,-0.087,-0.500,0.116,-0.500,0.116,-0.484,0.116,-0.484,0.116,-0.484,0.030,-0.484,0.030,-0.462,0.030,-0.462,0.030,-0.462,0.116,-0.462,0.116,-0.447,0.116,-0.447,0.116,-0.447,-0.087,-0.447,-0.087,-0.462,-0.087,-0.462,-0.087,-0.462,-0.001,-0.462,-0.001,-0.484,-0.001,-0.484,-0.001,-0.484,-0.087,-0.484,-0.087,-0.500,-0.087);

float si = .707;

vec3 add(vec3 a, vec3 b)
{
    if(a.y < b.y) return a;
    return b;
}

float dbullencoolen(vec2 x)
{
    float d;
    
    x *= .7;
    float ret = 1.;

    float n = 0.;
    for(int i=0; i<npts/4; ++i)
    {
        vec2 ptsi = vec2(path[4*i], path[4*i+1]),
            ptsip1 = vec2(path[4*i+2], path[4*i+3]),
            k = x-ptsi, 
            d = ptsip1-ptsi;
        
        float beta = k.x/d.x,
            alpha = d.y*k.x/d.x-k.y;
        
        n += step(.0, beta)*step(beta, 1.)*step(0., alpha);
        ret = min(ret, dline2(x, ptsi, ptsip1));
    }
    
    ret = mix(ret, -ret, mod(n, 2.));
    
    ret /= .7;
    return ret;
}

float dpsycoholika(vec2 x)
{
    float d;
    
    x *= .7;
    float ret = 1.;

    float n = 0.;
    for(int i=0; i<npts1/4; ++i)
    {
        vec2 ptsi = vec2(path1[4*i], path1[4*i+1]),
            ptsip1 = vec2(path1[4*i+2], path1[4*i+3]),
            k = x-ptsi, 
            d = ptsip1-ptsi;
        
        float beta = k.x/d.x,
            alpha = d.y*k.x/d.x-k.y;
        
        n += step(.0, beta)*step(beta, 1.)*step(0., alpha);
        ret = min(ret, dline2(x, ptsi, ptsip1));
    }
    
    ret = mix(ret, -ret, mod(n, 2.));
    
    ret /= .7;
    return ret;
}

float dorgelsaft(vec2 x)
{
    float d;
    
    x *= .7;
    float ret = 1.;

    float n = 0.;
    for(int i=0; i<npts3/4; ++i)
    {
        vec2 ptsi = vec2(path3[4*i], path3[4*i+1]),
            ptsip1 = vec2(path3[4*i+2], path3[4*i+3]),
            k = x-ptsi, 
            d = ptsip1-ptsi;
        
        float beta = k.x/d.x,
            alpha = d.y*k.x/d.x-k.y;
        
        n += step(.0, beta)*step(beta, 1.)*step(0., alpha);
        ret = min(ret, dline2(x, ptsi, ptsip1));
    }
    
    ret = mix(ret, -ret, mod(n, 2.));
    
    ret /= .7;
    return ret;
}

float dfuckcovid(vec2 x)
{
    float d;
    
    x *= .7;
    float ret = 1.;

    float n = 0.;
    for(int i=0; i<npts4/4; ++i)
    {
        vec2 ptsi = vec2(path4[4*i], path4[4*i+1]),
            ptsip1 = vec2(path4[4*i+2], path4[4*i+3]),
            k = x-ptsi, 
            d = ptsip1-ptsi;
        
        float beta = k.x/d.x,
            alpha = d.y*k.x/d.x-k.y;
        
        n += step(.0, beta)*step(beta, 1.)*step(0., alpha);
        ret = min(ret, dline2(x, ptsi, ptsip1));
    }
    
    ret = mix(ret, -ret, mod(n, 2.));
    
    ret /= .7;
    return ret;
}

float dhubschraubereintopf(vec2 x)
{
    float d;
    
    x *= .7;
    float ret = 1.;

    float n = 0.;
    for(int i=0; i<npts5/4; ++i)
    {
        vec2 ptsi = vec2(path5[4*i], path5[4*i+1]),
            ptsip1 = vec2(path5[4*i+2], path5[4*i+3]),
            k = x-ptsi, 
            d = ptsip1-ptsi;
        
        float beta = k.x/d.x,
            alpha = d.y*k.x/d.x-k.y;
        
        n += step(.0, beta)*step(beta, 1.)*step(0., alpha);
        ret = min(ret, dline2(x, ptsi, ptsip1));
    }
    
    ret = mix(ret, -ret, mod(n, 2.));
    
    ret /= .7;
    return ret;
}

// Taken from https://www.iquilezles.org/www/articles/smin/smin.htm
// Polynomial smooth min 2 (k=0.1)
float blendPolynomial2(float a, float b, float k)
{
    float h = max(k-abs(a-b), 0.)/k;
    return min(a, b) - h*h*k*.25;
}

float dtetrahedron_wireframe(vec3 x, float a, float da)
{
    vec3 p0 = a*vec3(c.zy,-si),
        p1 = a*vec3(c.xy,-si),
        p2 = a*vec3(c.yx,si),
        p3 = a*vec3(c.yz,si);
    return min(
        min(
            min(
                dline3(x,p0,p1),
                dline3(x,p1,p2)
            ),
            min(
                dline3(x,p2,p3),
                dline3(x,p3,p0)
            )
        ),
        min(
            dline3(x,p1,p3),
            dline3(x,p0,p2)
        )
    ) - da;
}