const int npts = 664;
const float path[npts] = float[npts](0.474,-0.145,0.474,-0.062,0.474,-0.062,0.500,-0.062,0.500,-0.062,0.500,-0.145,0.500,-0.145,0.474,-0.145,0.385,-0.145,0.385,0.104,0.385,0.104,0.449,0.104,0.449,0.104,0.449,0.063,0.449,0.063,0.462,0.063,0.462,0.063,0.462,-0.145,0.462,-0.145,0.436,-0.145,0.436,-0.145,0.436,0.060,0.436,0.060,0.423,0.060,0.423,0.060,0.423,0.019,0.423,0.019,0.411,0.019,0.411,0.019,0.411,-0.145,0.411,-0.145,0.385,-0.145,0.321,0.060,0.321,-0.020,0.321,-0.020,0.346,-0.020,0.346,-0.020,0.346,0.060,0.346,0.060,0.321,0.060,0.308,-0.145,0.308,-0.104,0.308,-0.104,0.295,-0.104,0.295,-0.104,0.295,0.063,0.295,0.063,0.308,0.063,0.308,0.063,0.308,0.104,0.308,0.104,0.359,0.104,0.359,0.104,0.359,0.063,0.359,0.063,0.372,0.063,0.372,0.063,0.372,-0.063,0.372,-0.063,0.321,-0.063,0.321,-0.063,0.321,-0.102,0.321,-0.102,0.359,-0.102,0.359,-0.102,0.359,-0.145,0.359,-0.145,0.308,-0.145,0.256,-0.145,0.256,0.102,0.256,0.102,0.244,0.102,0.244,0.102,0.244,0.145,0.244,0.145,0.282,0.145,0.282,0.145,0.282,-0.145,0.282,-0.145,0.256,-0.145,0.180,-0.102,0.205,-0.102,0.205,-0.102,0.205,0.060,0.205,0.060,0.180,0.060,0.180,0.060,0.180,-0.102,0.167,-0.145,0.167,-0.104,0.167,-0.104,0.154,-0.104,0.154,-0.104,0.154,0.063,0.154,0.063,0.167,0.063,0.167,0.063,0.167,0.104,0.167,0.104,0.218,0.104,0.218,0.104,0.218,0.063,0.218,0.063,0.231,0.063,0.231,0.063,0.231,-0.104,0.231,-0.104,0.218,-0.104,0.218,-0.104,0.218,-0.145,0.218,-0.145,0.167,-0.145,0.090,-0.102,0.115,-0.102,0.115,-0.102,0.115,0.060,0.115,0.060,0.090,0.060,0.090,0.060,0.090,-0.102,0.077,-0.145,0.077,-0.104,0.077,-0.104,0.064,-0.104,0.064,-0.104,0.064,0.063,0.064,0.063,0.077,0.063,0.077,0.063,0.077,0.104,0.077,0.104,0.128,0.104,0.128,0.104,0.128,0.063,0.128,0.063,0.141,0.063,0.141,0.063,0.141,-0.104,0.141,-0.104,0.128,-0.104,0.128,-0.104,0.128,-0.145,0.128,-0.145,0.077,-0.145,-0.013,-0.145,-0.013,-0.104,-0.013,-0.104,-0.026,-0.104,-0.026,-0.104,-0.026,0.063,-0.026,0.063,-0.013,0.063,-0.013,0.063,-0.013,0.104,-0.013,0.104,0.039,0.104,0.039,0.104,0.039,0.063,0.039,0.063,0.051,0.063,0.051,0.063,0.051,0.019,0.051,0.019,0.025,0.019,0.025,0.019,0.025,0.060,0.025,0.060,0.000,0.060,0.000,0.060,0.000,-0.102,0.000,-0.102,0.025,-0.102,0.025,-0.102,0.025,-0.061,0.025,-0.061,0.051,-0.061,0.051,-0.061,0.051,-0.104,0.051,-0.104,0.039,-0.104,0.039,-0.104,0.039,-0.145,0.039,-0.145,-0.013,-0.145,-0.115,-0.145,-0.115,0.104,-0.115,0.104,-0.051,0.104,-0.051,0.104,-0.051,0.063,-0.051,0.063,-0.038,0.063,-0.038,0.063,-0.038,-0.145,-0.038,-0.145,-0.064,-0.145,-0.064,-0.145,-0.064,0.060,-0.064,0.060,-0.077,0.060,-0.077,0.060,-0.077,0.019,-0.077,0.019,-0.089,0.019,-0.089,0.019,-0.089,-0.145,-0.089,-0.145,-0.115,-0.145,-0.179,0.060,-0.179,-0.020,-0.179,-0.020,-0.154,-0.020,-0.154,-0.020,-0.154,0.060,-0.154,0.060,-0.179,0.060,-0.192,-0.145,-0.192,-0.104,-0.192,-0.104,-0.205,-0.104,-0.205,-0.104,-0.205,0.063,-0.205,0.063,-0.192,0.063,-0.192,0.063,-0.192,0.104,-0.192,0.104,-0.141,0.104,-0.141,0.104,-0.141,0.063,-0.141,0.063,-0.128,0.063,-0.128,0.063,-0.128,-0.063,-0.128,-0.063,-0.179,-0.063,-0.179,-0.063,-0.179,-0.102,-0.179,-0.102,-0.141,-0.102,-0.141,-0.102,-0.141,-0.145,-0.141,-0.145,-0.192,-0.145,-0.244,-0.145,-0.244,0.102,-0.244,0.102,-0.256,0.102,-0.256,0.102,-0.256,0.145,-0.256,0.145,-0.218,0.145,-0.218,0.145,-0.218,-0.145,-0.218,-0.145,-0.244,-0.145,-0.295,-0.145,-0.295,0.102,-0.295,0.102,-0.308,0.102,-0.308,0.102,-0.308,0.145,-0.308,0.145,-0.269,0.145,-0.269,0.145,-0.269,-0.145,-0.269,-0.145,-0.295,-0.145,-0.385,-0.145,-0.385,-0.104,-0.385,-0.104,-0.397,-0.104,-0.397,-0.104,-0.397,0.104,-0.397,0.104,-0.371,0.104,-0.371,0.104,-0.371,-0.102,-0.371,-0.102,-0.359,-0.102,-0.359,-0.102,-0.359,-0.061,-0.359,-0.061,-0.347,-0.061,-0.347,-0.061,-0.347,0.104,-0.347,0.104,-0.321,0.104,-0.321,0.104,-0.321,-0.145,-0.321,-0.145,-0.385,-0.145,-0.474,0.102,-0.474,0.022,-0.474,0.022,-0.436,0.022,-0.436,0.022,-0.436,0.102,-0.436,0.102,-0.474,0.102,-0.423,-0.104,-0.423,-0.145,-0.423,-0.145,-0.500,-0.145,-0.500,-0.145,-0.500,0.145,-0.500,0.145,-0.423,0.145,-0.423,0.145,-0.423,0.104,-0.423,0.104,-0.410,0.104,-0.410,0.104,-0.410,0.019,-0.410,0.019,-0.436,0.019,-0.436,0.019,-0.436,-0.019,-0.436,-0.019,-0.410,-0.019,-0.410,-0.019,-0.410,-0.104,-0.410,-0.104,-0.423,-0.104,-0.474,-0.102,-0.436,-0.102,-0.436,-0.102,-0.436,-0.022,-0.436,-0.022,-0.474,-0.022,-0.474,-0.022,-0.474,-0.102);

const int npts1 = 736;
const float path1[npts1] = float[npts1](0.473,-0.087,0.473,-0.029,0.473,-0.029,0.500,-0.029,0.500,-0.029,0.500,-0.087,0.500,-0.087,0.473,-0.087,0.406,-0.001,0.406,-0.057,0.406,-0.057,0.432,-0.057,0.432,-0.057,0.432,-0.001,0.432,-0.001,0.406,-0.001,0.378,-0.058,0.378,0.001,0.378,0.001,0.392,0.001,0.392,0.001,0.392,0.030,0.392,0.030,0.432,0.030,0.432,0.030,0.432,0.057,0.432,0.057,0.392,0.057,0.392,0.057,0.392,0.087,0.392,0.087,0.446,0.087,0.446,0.087,0.446,0.058,0.446,0.058,0.459,0.058,0.459,0.058,0.459,-0.058,0.459,-0.058,0.446,-0.058,0.446,-0.058,0.446,-0.087,0.446,-0.087,0.392,-0.087,0.392,-0.087,0.392,-0.058,0.392,-0.058,0.378,-0.058,0.284,-0.087,0.284,0.116,0.284,0.116,0.311,0.116,0.311,0.116,0.311,0.001,0.311,0.001,0.324,0.001,0.324,0.001,0.324,0.030,0.324,0.030,0.337,0.030,0.337,0.030,0.337,0.087,0.337,0.087,0.365,0.087,0.365,0.087,0.365,0.028,0.365,0.028,0.351,0.028,0.351,0.028,0.351,-0.001,0.351,-0.001,0.338,-0.001,0.338,-0.001,0.338,-0.028,0.338,-0.028,0.351,-0.028,0.351,-0.028,0.351,-0.057,0.351,-0.057,0.365,-0.057,0.365,-0.057,0.365,-0.087,0.365,-0.087,0.337,-0.087,0.337,-0.087,0.337,-0.058,0.337,-0.058,0.324,-0.058,0.324,-0.058,0.324,-0.029,0.324,-0.029,0.311,-0.029,0.311,-0.029,0.311,-0.087,0.311,-0.087,0.284,-0.087,0.243,0.115,0.243,0.145,0.243,0.145,0.270,0.145,0.270,0.145,0.270,0.115,0.270,0.115,0.243,0.115,0.243,-0.087,0.243,0.057,0.243,0.057,0.230,0.057,0.230,0.057,0.230,0.087,0.230,0.087,0.270,0.087,0.270,0.087,0.270,-0.087,0.270,-0.087,0.243,-0.087,0.189,-0.087,0.189,0.086,0.189,0.086,0.176,0.086,0.176,0.086,0.176,0.116,0.176,0.116,0.216,0.116,0.216,0.116,0.216,-0.087,0.216,-0.087,0.189,-0.087,0.109,-0.057,0.135,-0.057,0.135,-0.057,0.135,0.057,0.135,0.057,0.109,0.057,0.109,0.057,0.109,-0.057,0.094,-0.087,0.094,-0.058,0.094,-0.058,0.081,-0.058,0.081,-0.058,0.081,0.058,0.081,0.058,0.094,0.058,0.094,0.058,0.094,0.087,0.094,0.087,0.149,0.087,0.149,0.087,0.149,0.058,0.149,0.058,0.162,0.058,0.162,0.058,0.162,-0.058,0.162,-0.058,0.149,-0.058,0.149,-0.058,0.149,-0.087,0.149,-0.087,0.094,-0.087,-0.014,-0.087,-0.014,0.116,-0.014,0.116,0.014,0.116,0.014,0.116,0.014,0.087,0.014,0.087,0.054,0.087,0.054,0.087,0.054,0.058,0.054,0.058,0.068,0.058,0.068,0.058,0.068,-0.087,0.068,-0.087,0.040,-0.087,0.040,-0.087,0.040,0.057,0.040,0.057,0.027,0.057,0.027,0.057,0.027,0.028,0.027,0.028,0.014,0.028,0.014,0.028,0.014,-0.087,0.014,-0.087,-0.014,-0.087,-0.081,-0.057,-0.054,-0.057,-0.054,-0.057,-0.054,0.057,-0.054,0.057,-0.081,0.057,-0.081,0.057,-0.081,-0.057,-0.095,-0.087,-0.095,-0.058,-0.095,-0.058,-0.108,-0.058,-0.108,-0.058,-0.108,0.058,-0.108,0.058,-0.095,0.058,-0.095,0.058,-0.095,0.087,-0.095,0.087,-0.040,0.087,-0.040,0.087,-0.040,0.058,-0.040,0.058,-0.027,0.058,-0.027,0.058,-0.027,-0.058,-0.027,-0.058,-0.040,-0.058,-0.040,-0.058,-0.040,-0.087,-0.040,-0.087,-0.095,-0.087,-0.189,-0.087,-0.189,-0.058,-0.189,-0.058,-0.203,-0.058,-0.203,-0.058,-0.203,0.058,-0.203,0.058,-0.189,0.058,-0.189,0.058,-0.189,0.087,-0.189,0.087,-0.135,0.087,-0.135,0.087,-0.135,0.058,-0.135,0.058,-0.122,0.058,-0.122,0.058,-0.122,0.028,-0.122,0.028,-0.149,0.028,-0.149,0.028,-0.149,0.057,-0.149,0.057,-0.175,0.057,-0.175,0.057,-0.175,-0.057,-0.175,-0.057,-0.149,-0.057,-0.149,-0.057,-0.149,-0.028,-0.149,-0.028,-0.122,-0.028,-0.122,-0.028,-0.122,-0.058,-0.122,-0.058,-0.135,-0.058,-0.135,-0.058,-0.135,-0.087,-0.135,-0.087,-0.189,-0.087,-0.284,-0.145,-0.284,-0.115,-0.284,-0.115,-0.244,-0.115,-0.244,-0.115,-0.244,-0.087,-0.244,-0.087,-0.284,-0.087,-0.284,-0.087,-0.284,-0.059,-0.284,-0.059,-0.297,-0.059,-0.297,-0.059,-0.297,0.087,-0.297,0.087,-0.270,0.087,-0.270,0.087,-0.270,-0.057,-0.270,-0.057,-0.244,-0.057,-0.244,-0.057,-0.244,0.087,-0.244,0.087,-0.216,0.087,-0.216,0.087,-0.216,-0.116,-0.216,-0.116,-0.230,-0.116,-0.230,-0.116,-0.230,-0.145,-0.230,-0.145,-0.284,-0.145,-0.392,-0.058,-0.392,-0.028,-0.392,-0.028,-0.364,-0.028,-0.364,-0.028,-0.364,-0.057,-0.364,-0.057,-0.338,-0.057,-0.338,-0.057,-0.338,-0.001,-0.338,-0.001,-0.379,-0.001,-0.379,-0.001,-0.379,0.028,-0.379,0.028,-0.392,0.028,-0.392,0.028,-0.392,0.058,-0.392,0.058,-0.379,0.058,-0.379,0.058,-0.379,0.087,-0.379,0.087,-0.324,0.087,-0.324,0.087,-0.324,0.057,-0.324,0.057,-0.364,0.057,-0.364,0.057,-0.364,0.030,-0.364,0.030,-0.324,0.030,-0.324,0.030,-0.324,0.001,-0.324,0.001,-0.311,0.001,-0.311,0.001,-0.311,-0.058,-0.311,-0.058,-0.324,-0.058,-0.324,-0.058,-0.324,-0.087,-0.324,-0.087,-0.379,-0.087,-0.379,-0.087,-0.379,-0.058,-0.379,-0.058,-0.392,-0.058,-0.472,0.086,-0.472,0.001,-0.472,0.001,-0.433,0.001,-0.433,0.001,-0.433,0.086,-0.433,0.086,-0.472,0.086,-0.500,-0.087,-0.500,0.116,-0.500,0.116,-0.419,0.116,-0.419,0.116,-0.419,0.087,-0.419,0.087,-0.405,0.087,-0.405,0.087,-0.405,-0.001,-0.405,-0.001,-0.419,-0.001,-0.419,-0.001,-0.419,-0.029,-0.419,-0.029,-0.472,-0.029,-0.472,-0.029,-0.472,-0.087,-0.472,-0.087,-0.500,-0.087);

// TODOs
// * Tube type: hexagonal, circular
// * Pattern types

vec3 add(vec3 a, vec3 b)
{
    if(a.y < b.y) return a;
    return b;
}

float m(vec2 x)
{
    return max(x.x,x.y);
}

float d210(vec2 x)
{
    return min(max(max(max(max(min(max(max(m(abs(vec2(abs(abs(x.x)-.25)-.25, x.y))-vec2(.2)), -m(abs(vec2(x.x+.5, abs(abs(x.y)-.05)-.05))-vec2(.12,.02))), -m(abs(vec2(abs(x.x+.5)-.1, x.y-.05*sign(x.x+.5)))-vec2(.02,.07))), m(abs(vec2(x.x+.5,x.y+.1))-vec2(.08,.04))), -m(abs(vec2(x.x, x.y-.04))-vec2(.02, .08))), -m(abs(vec2(x.x, x.y+.1))-vec2(.02))), -m(abs(vec2(x.x-.5, x.y))-vec2(.08,.12))), -m(abs(vec2(x.x-.5, x.y-.05))-vec2(.12, .07))), m(abs(vec2(x.x-.5, x.y))-vec2(.02, .08)));
}

float dbullencoolen(vec2 x)
{
    float d;
    
    x *= .7;
    float ret = 1.;

    float n = 0.;
    for(int i=0; i<npts/4; ++i)
    {
        vec2 ptsi = vec2(path[4*i], path[4*i+1]),
            ptsip1 = vec2(path[4*i+2], path[4*i+3]),
            k = x-ptsi, 
            d = ptsip1-ptsi;
        
        float beta = k.x/d.x,
            alpha = d.y*k.x/d.x-k.y;
        
        n += step(.0, beta)*step(beta, 1.)*step(0., alpha);
        ret = min(ret, dline2(x, ptsi, ptsip1));
    }
    
    ret = mix(ret, -ret, mod(n, 2.));
    
    ret /= .7;
    return ret;
}

float dpsycoholika(vec2 x)
{
    float d;
    
    x *= .7;
    float ret = 1.;

    float n = 0.;
    for(int i=0; i<npts1/4; ++i)
    {
        vec2 ptsi = vec2(path1[4*i], path1[4*i+1]),
            ptsip1 = vec2(path1[4*i+2], path1[4*i+3]),
            k = x-ptsi, 
            d = ptsip1-ptsi;
        
        float beta = k.x/d.x,
            alpha = d.y*k.x/d.x-k.y;
        
        n += step(.0, beta)*step(beta, 1.)*step(0., alpha);
        ret = min(ret, dline2(x, ptsi, ptsip1));
    }
    
    ret = mix(ret, -ret, mod(n, 2.));
    
    ret /= .7;
    return ret;
}

float rt = 1.,
    ms = 1.;
vec3 scene(vec3 x)
{
    vec3 sdf;

    if(iTime < 0.) // Team210 logo
    {
        // Box210 inside striped box
        RR = rot3(.4*iTime*vec3(1.1,1.3,1.7));
        vec3 y = RR * x;
        sdf = add(vec3(5.,  dbox210(y, 1.2), 0.), vec3(1., -dbox3(x, 2.*c.xxx), 0.));
    }
    else if(iTime < 1.e3) // Greetings
    {
        float bbx = dbox3(x, vec3(1.,.4,.2));
        sdf = add(vec3(6., bbx < 1.e-2?zextrude(x.z, mod(hardBeats, 2.) == 0. ? dbullencoolen(vec2(1.1,2.4)*(x.xy-.02*c.yx)):dpsycoholika(vec2(1.1,1.8)*x.xy), .1):bbx, 0.), vec3(1., -dbox3(x, 2.*c.xxx), 0.));
    }
    else if(iTime < 1.e3); // Metaballs in cube
    else if(iTime < 1.e3); // 
    else // Eye Tunnel
    {
        // Tube
        float d = -zextrude(x.z,length(x.xy)-rt*(1.+.2*sin(x.z)), 1.e3);
        sdf = vec3(0., d, 0.);
        
        // Back plane
        sdf = add(sdf, vec3(1., x.z+4., 0.));
        
        // Front plane
        sdf = add(sdf, vec3(2., abs(x.z)-1.e-3, 0.));
        
        // Objects
        vec3 y = mod(x-.2*iTime*c.yyx, ms)-.5*ms,
            yj = x-y,
            ori = hash33(1.e2*(yj-.2*iTime*c.yyx+103.));
        RR = rot3(2.*pi*ori+iTime*.3);
        sdf = add(sdf, vec3(3., fHedron(RR*y, 6,16, .2*ms, true), 0.));
        sdf = add(sdf, vec3(4., fHedron(RR*y, 0,6, .1825*ms, true), 0.));
    }
    
    return sdf;
}

vec3 palette(float scale)
{
    scale = abs(scale);
    const int N = 4;
    vec3 colors[N] = vec3[N](
        vec3(0.91,0.44,0.32),
        vec3(0.91,0.77,0.42),
        vec3(0.16,0.62,0.56),
        vec3(0.15,0.27,0.33)
    );
    float i = floor(scale),
        ip1 = mod(i + 1., float(N));
    return mix(colors[int(i)], colors[int(ip1)], fract(scale));
}

float sm(in float d)
{
    return smoothstep(1.5/iResolution.y, -1.5/iResolution.y, d);
}

vec3 pattern_horizontal_lines(vec2 uv)
{
    float ps = .5,
        dy = mod(uv.y-.4*iTime, ps)-.5*ps,
        d = abs(dy)-.05;
    return mix(c.yyy, c.xxx, sm(d));
}

vec3 pattern_vertical_lines(vec2 uv)
{
    float ps = .5,
        dx = mod(uv.x-.4*iTime, ps)-.5*ps,
        d = abs(dx)-.05;
    return mix(c.yyy, c.yxy, sm(d));
}

vec3 pattern_hexagon(vec2 uv)
{
    uv -= .1*iTime;
    float ys = pi/15.;
    vec4 v = hexCoords(uv/ys)*ys;
    
    return mix(c.yyy, c.xxx, sm(dregularpolygon(mat2(cos(pi/6.), sin(pi/6.), -sin(pi/6.), cos(pi/6.))*v.xy, 1.4*ys*clamp(.4+lfnoise(4.*(mod(v.zw,2.*pi)+13.+.3*iTime)),.1,1.), 6.)));
}

vec3 pattern_truchet_hex_standard(vec2 uv)
{
    uv -= .1*iTime;
    float ys = pi/15.;
    vec4 v = hexCoords(uv/ys)*ys;
    v.z = mod(v.z,2.*pi);
    
    vec2 r = hash22(1.e1*(v.zw+13.));
    
    float phi = -pi/6.+ 2.*pi/3.*floor(r.y*2.99),
        d;
    mat2 rp = mat2(cos(phi), sin(phi), -sin(phi), cos(phi)),
        ra = mat2(cos(pi/6.), sin(pi/6.), -sin(pi/6.), cos(pi/6.)),
        rat = transpose(ra);
    if(r.x <= .7)
    {
        vec2 dt1 = dtspline2(rp*v.xy, .5*ys*c.yz, .01*c.yy, .5*ys*c.yx),
            dt2 = dtspline2(rp*v.xy, .5*ys*rat*rat*c.yz, .01*c.yy, .5*ys*ra*ra*c.yx),
            dt3 = dtspline2(rp*v.xy, .5*ys*ra*ra*ra*ra*c.yz, .01*c.yy, .5*ys*ra*ra*c.yz);
        d = min(min(dt1.x,dt2.x),dt3.x)-.01;
    }
    else if(r.x <= .9)
    {
        vec2 dt1 = dtspline2(v.xy, .5*ys*rat*c.yz, .01*c.yy, .5*ys*ra*c.yz),
            dt2 = dtspline2(v.xy, .5*ys*rat*c.yx, .01*c.yy, .5*ys*rat*rat*rat*c.yx),
            dt3 = dtspline2(v.xy, .5*ys*ra*ra*ra*c.yx, .01*c.yy, .5*ys*ra*c.yx);
        d = min(min(dt1.x,dt2.x),dt3.x)-.01;
    }
    else// if(r.x <= .75)
    {
        vec2 dt1 = dtline2(rp*v.xy, .5*ys*c.yz, .5*ys*c.yx),
            dt2 = dtline2(rp*v.xy, .5*ra*ra*ys*c.yz, .5*ys*ra*ra*c.yx),
            dt3 = dtline2(rp*v.xy, .5*rat*rat*ys*c.yz, .5*ys*rat*rat*c.yx);
        d = min(min(dt1.x,dt2.x),dt3.x)-.01;
    }
    
    return mix(c.yyy, c.xxx, sm(d));
}

vec3 pattern_truchet_hex_edgy(vec2 uv)
{
    uv -= .1*iTime;
    float ys = pi/14.;
    vec4 v = hexCoords(uv/ys)*ys;
    v.z = mod(v.z,2.*pi);
    
    vec2 r = hash22(1.e1*(v.zw+13.));
    float phi = -pi/6.+ 2.*pi/3.*floor(r.y*2.99), 
        rs = .2*ys;
    mat2 rp = mat2(cos(phi), sin(phi), -sin(phi), cos(phi)),
        ra = mat2(cos(pi/6.), sin(pi/6.), -sin(pi/6.), cos(pi/6.)),
        rat = transpose(ra);

    vec2 dt1 = dtline2_unclamped(rp*v.xy, .5*ys*c.yz, .5*ys*c.yx),
        dt2 = dtline2_unclamped(rp*v.xy, .5*ys*rat*rat*c.yz, .5*ys*ra*ra*c.yx),
        dt3 = dtline2_unclamped(rp*v.xy, .5*ys*ra*ra*ra*ra*c.yz, .5*ys*ra*ra*c.yz);
    float d = min(min(dt1.x-rs,dt2.x-rs*cos(pi/3.)),dt3.x-rs*cos(pi/3.));
    return mix(c.yyy, c.xxx, sm(-d));
}

vec2 as;
bool ray(inout vec3 col, out vec3 x, inout float d, vec3 dir, out vec3 s, vec3 o, vec3 l, out vec3 n, int num)
{
    for(int i=0; i<num; ++i)
    {
        x = o + d * dir;
        s = scene(x);
        
        if(s.y < 1.e-4)
        {
            // Blinn-Phong Illumination
            float dx = 5.e-5;
            n = normalize(vec3(
                scene(x+dx*c.xyy).y, 
                scene(x+dx*c.yxy).y, 
                scene(x+dx*c.yyx).y
            )-s.y);
            
            vec3 ads = vec3(.5,.4,.3);
            float smoothness = .1;
            float r0 = .9;
            
            if(s.x == 0.) // Tube
            {
                vec2 uv = vec2(rt * atan(x.y,x.x), x.z);
                col = pattern_truchet_hex_edgy(uv);
                r0 = .1;
                ads = vec3(.4,.2, .1);
            }
            else if(s.x == 1.) // Back plane
            {
                vec2 uv = x.xy;
                col = pattern_horizontal_lines(uv);
                r0 = .1;
                ads = vec3(.8,.4, .1);
            }
            else if(s.x == 2.) // Front plane
            {
                vec2 uv = x.xy;
                col = pattern_vertical_lines(uv);
                r0 = .1;
                ads = vec3(.8,.4, .1);
            }
            else if(s.x == 3.) // Polyhedra color part
            {
                vec3 y = mod(x-.2*iTime*c.yyx, ms)-.5*ms,
                    yj = x-y,
                    ra = hash33(1.e2*(yj-.2*iTime*c.yyx+103.));
                col = mix(c.yyy, ra, clamp(length(y)/ms*2., 0.,1.));
                r0 = .1;
                ads = vec3(.8,.4, .1);
            }
            else if(s.x == 4.) // Polyhedra white part
            {
                vec3 y = mod(x-.2*iTime*c.yyx, ms)-.5*ms;
                col = mix(c.yyy, c.xxx, clamp(length(y)/ms*2., 0.,1.));
                r0 = .1;
                ads = vec3(.8,.4, .1);
            }
            else if(s.x == 5.) // Logo210
            {
                ads = vec3(.4,.4,.1);
                r0 = .1;
                vec3 y = RR * x;
                col = mix(vec3(.9,.3,.1), .2*c.xxx, sm(-dbox3(1.2*y, .25*1.1*c.xxx)/1.2));
            }
            else if(s.x == 6.) // Bullencoolen
            {
                ads = vec3(.4,.4,.1);
                r0 = .1;
                col = mix(vec3(.9,.1,.3), .2*c.xxx, sm(abs(x.z)-.045));
            }
            
            // Schlick
            ads.z += r0 + (1. - r0) * pow(clamp((1. - dot(n, -dir)), 0., 1.), 5.) * smoothness;

            col = ads.x * col
                + ads.y * col * max(dot(normalize(l-x),n),0.)
                + ads.z * col * pow(max(dot(reflect(normalize(l-x),n),dir),0.),2.);
                    
            if(s.x == -1.) col = c.yyy;
                    
            return true;
        }
        //d += s.y;
        //d += min(abs(s.y), 3.e-3);
        d += s.y<5.e-1?min(s.y,6.e-3):min(s.y,1.e-2);//min(s.y,1.e-3);
    }
    return false;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    spb = 60./bpm;
    stepTime = mod(iTime+.5*spb, spb)-.5*spb;
    nbeats = (iTime-stepTime+.5*spb)/spb + smoothstep(-.2*spb, .2*spb, stepTime);
    scale = smoothstep(-.3*spb, 0., stepTime)*smoothstep(.3*spb, 0., stepTime);
    hardBeats = round((iTime-stepTime)/spb);
    
    vec2 uv = fragCoord/iResolution.xy,
        unit = 1./iResolution.xy;
    ivec2 index = ivec2(fragCoord);
    
    vec2 uv1 = (fragCoord-.5*iResolution.xy)/iResolution.y;
    vec3 
        o = c.yyx,
        t = c.yyy,
        col = c.yyy,
        c1,
        x,
        x1,
        n,
        r = c.xyy,
        dir = normalize(t + uv1.x * r + uv1.y * cross(r,normalize(t-o))-o),
        l = .03*c.zyx,
        s,
        s1;
    float d0 = 0.,
        d;
    
    // Center flare
    //col = mix(col, c.xxx, smoothstep(.02,0.,length(uv1)));
    
    //as = asphere(o,dir, .55);
    //if(as.x < 1.e1)
    {
        // Material ray
        if(ray(col, x, d0, dir, s, o, l, n, 1350))
        {
            if(s.x == 2. && all(equal(col, c.yyy)))
            {
                d0 += 3.e-3;
                ray(col, x, d0, dir, s, o, l, n, 1460);
            }
            
            /*
            // Reflection
            if(s.z > 0.)
            {
                dir = reflect(dir,n);
                float d = 2.e-2;
                if(ray(c1, x1, d, dir, s1, x, l, n, 550))
                {
                    col = mix(col, c1, s.z);
                    s = s1;
                }
            }*/
            
            // Ambient occlusion
            float d = 1.e-2,
                ao = 1.,
                am = 150.;
            
            for(float i=0.; i<=am; i+=1.)
            {
                d += .01;
                ao *= 1.-max(0.,(d-scene(x + d*n).y)/d/am);
            }
            
            col *= ao;
            
            // Hard Shadow
            /*
            d = 2.e-2;
            if(ray(c1, x1, d, normalize(l-x), s1, x, l, n, 250) && length(l-x1) < length(l-x))
                col *= .7;
            //*/
            /*
            
            // Soft shadow
            o = x;
            dir = normalize(l-x);
            float d1 = .1;

                float res = 1.0;
                float ph = 1.e20;
                for(int i=0; i<512; ++i)
                {
                    x = o + d1 * dir;
                    s = scene(x);
                    if(s.y < 1.e-4 ) 
                    {
                        res = 0.;
                        break;
                    }
                    
                    //res = min( res, 10.0*s.y/d1 );
                    
                    float y = s.y*s.y/(2.0*ph);
                    float da = sqrt(s.y*s.y-y*y);
                    res = min( res, 10.0*da/max(0.0,d1-y) );
                    ph = s.y;
                    
                    d1 += s.y<5.e-2?min(s.y,5.e-3):min(s.y,1.e-2);//min(s.y,1.e-3);
                    //d1 += s.y<5.e-1?min(s.y,5.e-3):min(s.y,5.e-1);
                }
            
            res = clamp( res, 0.0, 1.0 );
            res = res*res*(3.0-2.0*res);
            
            col = mix(.3*col, col, res);
            //*/
        }
    }
    
    // Fog
    //col = mix(col, vec3(1.00,0.65,0.37), smoothstep(6., 12., d0));
    
    // Gamma
    //col += col*col + col*col*col;
    //col *= .75;
    
    col = hsv2rgb(rgb2hsv(col)*vec3(lfnoise(2.*nbeats*c.xx),1.,1.));
    col = mix(col, 1.5*col, scale);

    col *= smoothstep(0., 1., iTime); // TODO: Add fade to black
    
    //fragColor = vec4(clamp(col,0.,1.),1.);
    
    //col = mix(col, 2.*col, clamp(.5-length(x),0.,1.));
    
    fragColor = mix(texture(iChannel0, uv), vec4(clamp(col,0.,1.),1.), .5);
}